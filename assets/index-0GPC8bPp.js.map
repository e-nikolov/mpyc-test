{"version":3,"file":"index-0GPC8bPp.js","sources":["../../src/ts/utils/log.ts","../../src/ts/bench/index.ts"],"sourcesContent":["\n\nexport const tableLogger = (selector = \"#out\", columns = [\"Data\"]) => (...data: any[]) => {\n    const table = ensureLogTable(selector, columns)\n\n\n    const row = table.insertRow()\n    for (let arg of data) {\n\n        const cell = row.insertCell()\n        cell.textContent = arg\n        cell.style.paddingRight = \"50px\"\n    }\n}\n\nexport const ensureLogTable = (selector = \"#out\", columns = [\"Data\"]) => {\n    const div = document.querySelector<HTMLDivElement>(selector)!\n    let existingTable = div.querySelector<HTMLTableElement>(\"table\")\n    if (existingTable) {\n        return existingTable;\n    }\n\n    const newTable = document.createElement(\"table\")\n    const headRow = newTable.createTHead().insertRow()\n    headRow.style.borderBottom = \"1px solid #ccc\"\n    for (let column of columns) {\n        headRow.insertCell().textContent = column\n    }\n    div.insertAdjacentElement(\"beforeend\", newTable)\n    return newTable\n}\n\nexport const logTable = tableLogger(\"#out\")\n\n","import { logTable, sleep, tableLogger } from \"../utils\"\n\n\n// Ported from Go's testing.B: https://cs.opensource.google/go/go/+/refs/tags/go1.21.3:src/testing/benchmark.go;l=293\n\ntype benchOpts = Required<{\n    name?: string\n    setupFn: (b: Benchmark) => void\n    logEnabled?: boolean\n    logSelector?: string\n    runtimeGoalMS: number\n    this?: any\n}>\n\nexport abstract class BenchSuite {\n    static async run2(opts: Partial<benchOpts> = {}, instance?: any) {\n        const target = instance ? Object.getPrototypeOf(instance) : this.prototype\n\n        for (const methodName of Object.getOwnPropertyNames(target)) {\n            if (methodName == \"constructor\") continue\n            await bench(target[methodName].bind(instance || target), { ...opts, name: `${opts.name || target.constructor.name} - ${methodName}` })\n            await sleep(0)\n        }\n    }\n\n    async run(opts: Partial<benchOpts> = {}) {\n        await BenchSuite.run2(opts, this)\n    }\n}\n\n\nexport const bench = async (fn: (b: Benchmark) => any, opts: Partial<benchOpts> = {}) => {\n    opts = { ...defaultOpts, ...opts }\n\n    let B = new Benchmark(fn, opts)\n\n    await B.run()\n\n    if (opts.logEnabled) {\n        B.logTable(opts.logSelector)\n    }\n\n    return B;\n}\n\nconst defaultOpts = {\n    name: \"\",\n    setupFn: () => { },\n    logEnabled: true,\n    logSelector: \"#out\",\n    runtimeGoalMS: 500,\n    this: undefined,\n}\n\nexport class Benchmark {\n    protected _N: number = 0\n    protected _I: number = 0\n    protected _duration: number = 0\n    protected benchFunc: (b: Benchmark) => any = () => { }\n    protected startTime: number = 0\n    protected timerOn: boolean = false\n    protected opts: benchOpts\n\n    get N() {\n        return this._N\n    }\n    get I() {\n        return this._I\n    }\n    get duration() {\n        return this._duration\n    }\n    get name() {\n        return this.opts.name\n    }\n\n    get result() {\n        return {\n            name: this.name,\n            N: this.N.toLocaleString,\n            duration: this.duration.toLocaleString\n        }\n    }\n\n    constructor(fn: (b: Benchmark) => any, opts: Partial<benchOpts> = {}) {\n        this.opts = { ...defaultOpts, ...opts }\n        this.benchFunc = fn\n    }\n\n    StartTimer() {\n        if (this.timerOn) {\n            return\n        }\n        this.startTime = performance.now()\n        this.timerOn = true\n    }\n    StopTimer() {\n        if (!this.timerOn) {\n            return\n        }\n\n        this._duration += performance.now() - this.startTime\n        this.timerOn = false\n    }\n    ResetTimer() {\n        if (this.timerOn) {\n            this.startTime = performance.now()\n        }\n\n        this._duration = 0\n    }\n\n    run = async () => {\n        await this.runN(1)\n\n        for (let n = 1; this._duration <= this.opts.runtimeGoalMS && n < 1e9;) {\n            let last = n;\n            // Predict required iterations.\n            let prevIters = this._N\n            let prevms = this._duration;\n            if (prevms <= 0) {\n                // Round up, to avoid div by zero.\n                prevms = 1\n            }\n\n            // Order of operations matters.\n            // For very fast benchmarks, prevIters ~= prevns.\n            // If you divide first, you get 0 or 1,\n            // which can hide an order of magnitude in execution time.\n            // So multiply first, then divide.\n            n = Math.floor(this.opts.runtimeGoalMS * prevIters / prevms)\n            // Run more iterations than we think we'll need (1.2x).\n            n += Math.floor(n / 5)\n            // Don't grow too fast in case we had timing errors previously.\n            n = Math.min(n, 100 * last)\n            // Be sure to run at least one more than last time.\n            n = Math.max(n, last + 1)\n            // Don't run more than 1e9 times.\n            n = Math.min(n, 1e9)\n            // console.log(`Running ${n.toLocaleString()} iterations`)\n            await this.runN(n)\n            // console.log(`Running ${n.toLocaleString()} iterations...done`)\n        }\n    }\n\n    protected runN = async (n: number) => {\n        this._N = n\n\n        // console.log(\"setup\")\n        for (this._I = 0; this._I < n; this._I++) {\n            this.opts.setupFn(this)\n        }\n        // console.log(\"setup...done\")\n        // console.log(\"bench\")\n        this.ResetTimer()\n        this.StartTimer()\n        for (this._I = 0; this._I < n; this._I++) {\n            // await this.benchFunc.apply(this.opts.this, [this])\n            await this.benchFunc(this)\n        }\n        this.StopTimer()\n        // console.log(\"bench...done\", this._duration.toLocaleString())\n    }\n\n    toString() {\n        return `${this.name}\\t\\t${Math.round(1000 * this.N / (this.duration + 1)).toLocaleString()} ops/sec`\n    }\n\n    toStrings() {\n        return [this.name, `${Math.round(1000 * this.N / (this.duration + 1)).toLocaleString()} ops/sec`]\n    }\n\n    logTable(selector = \"#out\") {\n        tableLogger(selector, [\"Name\", \"Ops/sec\"])(...this.toStrings())\n    }\n}\n"],"names":["ensureLogTable","selector","columns","div","document","querySelector","existingTable","newTable","createElement","headRow","createTHead","insertRow","style","borderBottom","column","insertCell","textContent","insertAdjacentElement","BenchSuite","run2","opts","instance","target","Object","getPrototypeOf","this","prototype","methodName","getOwnPropertyNames","bench","bind","name","constructor","sleep","run","async","fn","defaultOpts","B","Benchmark","logEnabled","logTable","logSelector","setupFn","runtimeGoalMS","_N","_I","_duration","benchFunc","startTime","timerOn","N","I","duration","result","toLocaleString","StartTimer","performance","now","StopTimer","ResetTimer","runN","n","last","prevIters","prevms","Math","floor","min","max","toString","round","toStrings","data","row","arg","cell","paddingRight","tableLogger"],"mappings":"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"}