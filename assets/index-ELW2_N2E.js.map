{"version":3,"file":"index-ELW2_N2E.js","sources":["../../bench/channels2/index.ts","../../bench/channels2/index.html?html-proxy&index=1.js"],"sourcesContent":["'use strict';\n\nexport function main() {\n    let out = document.querySelector(\"#out\")\n    function log(msg, t, n) {\n        out.innerHTML += `${msg}, ${toString(t / 1000)}, ${toString(1000 * n / t)} <br>`\n    }\n    function toString(t) {\n        // return Math.round(t / 1000).toLocaleString()   \n        return (Math.round(100 * t) / 100).toLocaleString()\n    }\n\n    let n = 3_000_000\n    let ch = new MessageChannel()\n    let xx = 0\n\n    ch.port1.onmessage = (e) => {\n        xx += 1\n        if (xx > 1000000 - 10) {\n            log(\"done up to\", 1000 * xx, 0)\n            log(\"n=\", 1000 * n, 0)\n            ch.port2.postMessage(undefined)\n        }\n        if (xx % 100000 === 0) {\n            log(\"done up to\", 1000 * xx, 0)\n            log(\"n=\", 1000 * n, 0)\n            ch.port2.postMessage(undefined)\n\n\n        }\n        if (xx >= n) {\n            ch.port2.postMessage(undefined)\n            let tre = performance.now() - ts\n            // console.log(\"done receiving\", toString(tre / 1000), toString(1000 * n / tre))\n            // self.postMessage([\"proxy:js:display\", `done receiving ${toString(tre / 1000)}, ${toString(1000 * n / tre)}\\n`])\n            log(\"done receiving\", tre, n)\n        }\n    }\n\n    console.log(\"start sending\")\n    log(\"start sending\", 1, 1)\n    // self.postMessage([\"proxy:js:display\", `start sending\\n`])\n    let ts = performance.now()\n    for (let i = 0; i < n; i++) {\n        ch.port2.postMessage(undefined)\n    }\n\n    let tse = performance.now() - ts\n    // self.postMessage([\"proxy:js:display\", `done sending ${toString(tse / 1000)}, ${toString(1000 * n / tse)}\\n`])\n    log(\"done sending\", tse, n)\n    console.log(\"done sending\", toString(tse / 1000), toString(1000 * n / tse))\n\n}\n","\n    import * as bench from \"./index.ts\"\n    \n    bench.main()\n  "],"names":["out","document","querySelector","log","msg","t","n","innerHTML","toString","Math","round","toLocaleString","ch","MessageChannel","xx","port1","onmessage","e","port2","postMessage","performance","now","ts","console","i","tse","bench.main"],"mappings":"2HAEO,WACC,IAAAA,EAAMC,SAASC,cAAc,QACxB,SAAAC,EAAIC,EAAKC,EAAGC,GACjBN,EAAIO,WAAa,GAAGH,MAAQI,EAASH,EAAI,SAAUG,EAAS,IAAOF,EAAID,SAC3E,CACA,SAASG,EAASH,GAEd,OAAQI,KAAKC,MAAM,IAAML,GAAK,KAAKM,gBACvC,CAEA,IAAIL,EAAI,IACJM,EAAK,IAAIC,eACTC,EAAK,EAENF,EAAAG,MAAMC,UAAaC,IAclB,GAbMH,GAAA,EACFA,EAAK,SACDX,EAAA,aAAc,IAAOW,EAAI,GACzBX,EAAA,KAAM,IAAOG,EAAG,GACjBM,EAAAM,MAAMC,iBAAY,IAErBL,EAAK,KAAW,IACZX,EAAA,aAAc,IAAOW,EAAI,GACzBX,EAAA,KAAM,IAAOG,EAAG,GACjBM,EAAAM,MAAMC,iBAAY,IAIrBL,GAAMR,EAAG,CACNM,EAAAM,MAAMC,iBAAY,GAIjBhB,EAAA,iBAHMiB,YAAYC,MAAQC,EAGHhB,EAC/B,GAGJiB,QAAQpB,IAAI,iBACRA,EAAA,gBAAiB,EAAG,GAEpB,IAAAmB,EAAKF,YAAYC,MACrB,IAAA,IAASG,EAAI,EAAGA,EAAIlB,EAAGkB,IAChBZ,EAAAM,MAAMC,iBAAY,GAGrB,IAAAM,EAAML,YAAYC,MAAQC,EAE1BnB,EAAA,eAAgBsB,EAAKnB,GACjBiB,QAAApB,IAAI,eAAgBK,EAASiB,EAAM,KAAOjB,EAAS,IAAOF,EAAImB,GAE1E,CCjDIC"}