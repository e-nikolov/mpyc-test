{"version":3,"file":"encode-79CO1kuF.js","sources":["../../../.yarn/cache/cbor-x-npm-1.5.6-e57ee4fceb-103e75419f.zip/node_modules/cbor-x/decode.js","../../../.yarn/cache/cbor-x-npm-1.5.6-e57ee4fceb-103e75419f.zip/node_modules/cbor-x/encode.js"],"sourcesContent":["let decoder\ntry {\n\tdecoder = new TextDecoder()\n} catch(error) {}\nlet src\nlet srcEnd\nlet position = 0\nlet alreadySet\nconst EMPTY_ARRAY = []\nconst LEGACY_RECORD_INLINE_ID = 105\nconst RECORD_DEFINITIONS_ID = 0xdffe\nconst RECORD_INLINE_ID = 0xdfff // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'\nconst BUNDLED_STRINGS_ID = 0xdff9\nconst PACKED_TABLE_TAG_ID = 51\nconst PACKED_REFERENCE_TAG_ID = 6\nconst STOP_CODE = {}\nlet strings = EMPTY_ARRAY\nlet stringPosition = 0\nlet currentDecoder = {}\nlet currentStructures\nlet srcString\nlet srcStringStart = 0\nlet srcStringEnd = 0\nlet bundledStrings\nlet referenceMap\nlet currentExtensions = []\nlet currentExtensionRanges = []\nlet packedValues\nlet dataView\nlet restoreMapsAsObject\nlet defaultOptions = {\n\tuseRecords: false,\n\tmapsAsObjects: true\n}\nlet sequentialMode = false\nlet inlineObjectReadThreshold = 2;\nvar BlockedFunction // we use search and replace to change the next call to BlockedFunction to avoid CSP issues for\n// no-eval build\ntry {\n\tnew Function('')\n} catch(error) {\n\t// if eval variants are not supported, do not create inline object readers ever\n\tinlineObjectReadThreshold = Infinity\n}\n\n\n\nexport class Decoder {\n\tconstructor(options) {\n\t\tif (options) {\n\t\t\tif ((options.keyMap || options._keyMap) && !options.useRecords) {\n\t\t\t\toptions.useRecords = false\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\t}\n\t\t\tif (options.useRecords === false && options.mapsAsObjects === undefined)\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\tif (options.getStructures)\n\t\t\t\toptions.getShared = options.getStructures\n\t\t\tif (options.getShared && !options.structures)\n\t\t\t\t(options.structures = []).uninitialized = true // this is what we use to denote an uninitialized structures\n\t\t\tif (options.keyMap) {\n\t\t\t\tthis.mapKey = new Map()\n\t\t\t\tfor (let [k,v] of Object.entries(options.keyMap)) this.mapKey.set(v,k)\n\t\t\t}\n\t\t}\n\t\tObject.assign(this, options)\n\t}\n\t/*\n\tdecodeKey(key) {\n\t\treturn this.keyMap\n\t\t\t? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key\n\t\t\t: key\n\t}\n\t*/\n\tdecodeKey(key) {\n\t\treturn this.keyMap ? this.mapKey.get(key) || key : key\n\t}\n\t\n\tencodeKey(key) {\n\t\treturn this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key\n\t}\n\n\tencodeKeys(rec) {\n\t\tif (!this._keyMap) return rec\n\t\tlet map = new Map()\n\t\tfor (let [k,v] of Object.entries(rec)) map.set((this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k), v)\n\t\treturn map\n\t}\n\n\tdecodeKeys(map) {\n\t\tif (!this._keyMap || map.constructor.name != 'Map') return map\n\t\tif (!this._mapKey) {\n\t\t\tthis._mapKey = new Map()\n\t\t\tfor (let [k,v] of Object.entries(this._keyMap)) this._mapKey.set(v,k)\n\t\t}\n\t\tlet res = {}\n\t\t//map.forEach((v,k) => res[Object.keys(this._keyMap)[Object.values(this._keyMap).indexOf(k)] || k] = v)\n\t\tmap.forEach((v,k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] =  v)\n\t\treturn res\n\t}\n\t\n\tmapDecode(source, end) {\n\t\n\t\tlet res = this.decode(source)\n\t\tif (this._keyMap) { \n\t\t\t//Experiemntal support for Optimised KeyMap  decoding \n\t\t\tswitch (res.constructor.name) {\n\t\t\t\tcase 'Array': return res.map(r => this.decodeKeys(r))\n\t\t\t\t//case 'Map': return this.decodeKeys(res)\n\t\t\t}\n\t\t}\n\t\treturn res\n\t}\n\n\tdecode(source, end) {\n\t\tif (src) {\n\t\t\t// re-entrant execution, save the state and restore it after we do this decode\n\t\t\treturn saveState(() => {\n\t\t\t\tclearSource()\n\t\t\t\treturn this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end)\n\t\t\t})\n\t\t}\n\t\tsrcEnd = end > -1 ? end : source.length\n\t\tposition = 0\n\t\tstringPosition = 0\n\t\tsrcStringEnd = 0\n\t\tsrcString = null\n\t\tstrings = EMPTY_ARRAY\n\t\tbundledStrings = null\n\t\tsrc = source\n\t\t// this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n\t\t// technique for getting data from a database where it can be copied into an existing buffer instead of creating\n\t\t// new ones\n\t\ttry {\n\t\t\tdataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength))\n\t\t} catch(error) {\n\t\t\t// if it doesn't have a buffer, maybe it is the wrong type of object\n\t\t\tsrc = null\n\t\t\tif (source instanceof Uint8Array)\n\t\t\t\tthrow error\n\t\t\tthrow new Error('Source must be a Uint8Array or Buffer but was a ' + ((source && typeof source == 'object') ? source.constructor.name : typeof source))\n\t\t}\n\t\tif (this instanceof Decoder) {\n\t\t\tcurrentDecoder = this\n\t\t\tpackedValues = this.sharedValues &&\n\t\t\t\t(this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) :\n\t\t\t\tthis.sharedValues)\n\t\t\tif (this.structures) {\n\t\t\t\tcurrentStructures = this.structures\n\t\t\t\treturn checkedRead()\n\t\t\t} else if (!currentStructures || currentStructures.length > 0) {\n\t\t\t\tcurrentStructures = []\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentDecoder = defaultOptions\n\t\t\tif (!currentStructures || currentStructures.length > 0)\n\t\t\t\tcurrentStructures = []\n\t\t\tpackedValues = null\n\t\t}\n\t\treturn checkedRead()\n\t}\n\tdecodeMultiple(source, forEach) {\n\t\tlet values, lastPosition = 0\n\t\ttry {\n\t\t\tlet size = source.length\n\t\t\tsequentialMode = true\n\t\t\tlet value = this ? this.decode(source, size) : defaultDecoder.decode(source, size)\n\t\t\tif (forEach) {\n\t\t\t\tif (forEach(value) === false) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tif (forEach(checkedRead()) === false) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalues = [ value ]\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tvalues.push(checkedRead())\n\t\t\t\t}\n\t\t\t\treturn values\n\t\t\t}\n\t\t} catch(error) {\n\t\t\terror.lastPosition = lastPosition\n\t\t\terror.values = values\n\t\t\tthrow error\n\t\t} finally {\n\t\t\tsequentialMode = false\n\t\t\tclearSource()\n\t\t}\n\t}\n}\nexport function getPosition() {\n\treturn position\n}\nexport function checkedRead() {\n\ttry {\n\t\tlet result = read()\n\t\tif (bundledStrings) {\n\t\t\tif (position >= bundledStrings.postBundlePosition) {\n\t\t\t\tlet error = new Error('Unexpected bundle position');\n\t\t\t\terror.incomplete = true;\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\t// bundled strings to skip past\n\t\t\tposition = bundledStrings.postBundlePosition;\n\t\t\tbundledStrings = null;\n\t\t}\n\n\t\tif (position == srcEnd) {\n\t\t\t// finished reading this source, cleanup references\n\t\t\tcurrentStructures = null\n\t\t\tsrc = null\n\t\t\tif (referenceMap)\n\t\t\t\treferenceMap = null\n\t\t} else if (position > srcEnd) {\n\t\t\t// over read\n\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\terror.incomplete = true\n\t\t\tthrow error\n\t\t} else if (!sequentialMode) {\n\t\t\tthrow new Error('Data read, but end of buffer not reached')\n\t\t}\n\t\t// else more to read, but we are reading sequentially, so don't clear source yet\n\t\treturn result\n\t} catch(error) {\n\t\tclearSource()\n\t\tif (error instanceof RangeError || error.message.startsWith('Unexpected end of buffer')) {\n\t\t\terror.incomplete = true\n\t\t}\n\t\tthrow error\n\t}\n}\n\nexport function read() {\n\tlet token = src[position++]\n\tlet majorType = token >> 5\n\ttoken = token & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\treturn getFloat16()\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat32(position)\n\t\t\t\t\tif (currentDecoder.useFloat32 > 2) {\n\t\t\t\t\t\t// this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\tlet multiplier = mult10[((src[position] & 0x7f) << 1) | (src[position + 1] >> 7)]\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\treturn ((multiplier * value + (value > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n\t\t\t\t\t}\n\t\t\t\t\tposition += 4\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t\tcase 0x1b:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat64(position)\n\t\t\t\t\tposition += 8\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\tif (majorType > 1) {\n\t\t\t\t\tif (dataView.getUint32(position) > 0)\n\t\t\t\t\t\tthrow new Error('JavaScript does not support arrays, maps, or strings with length over 4294967295')\n\t\t\t\t\ttoken = dataView.getUint32(position + 4)\n\t\t\t\t} else if (currentDecoder.int64AsNumber) {\n\t\t\t\t\ttoken = dataView.getUint32(position) * 0x100000000\n\t\t\t\t\ttoken += dataView.getUint32(position + 4)\n\t\t\t\t} else\n\t\t\t\t\ttoken = dataView.getBigUint64(position)\n\t\t\t\tposition += 8\n\t\t\t\tbreak\n\t\t\tcase 0x1f: \n\t\t\t\t// indefinite length\n\t\t\t\tswitch(majorType) {\n\t\t\t\t\tcase 2: // byte string\n\t\t\t\t\tcase 3: // text string\n\t\t\t\t\t\tthrow new Error('Indefinite length not supported for byte or text strings')\n\t\t\t\t\tcase 4: // array\n\t\t\t\t\t\tlet array = []\n\t\t\t\t\t\tlet value, i = 0\n\t\t\t\t\t\twhile ((value = read()) != STOP_CODE) {\n\t\t\t\t\t\t\tarray[i++] = value\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn majorType == 4 ? array : majorType == 3 ? array.join('') : Buffer.concat(array)\n\t\t\t\t\tcase 5: // map\n\t\t\t\t\t\tlet key\n\t\t\t\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) while((key = read()) != STOP_CODE) object[safeKey(currentDecoder.decodeKey(key))] = read()\n\t\t\t\t\t\t\telse while ((key = read()) != STOP_CODE) object[safeKey(key)] = read()\n\t\t\t\t\t\t\treturn object\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet map = new Map()\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) while((key = read()) != STOP_CODE) map.set(currentDecoder.decodeKey(key), read())\n\t\t\t\t\t\t\telse while ((key = read()) != STOP_CODE) map.set(key, read())\n\t\t\t\t\t\t\treturn map\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\treturn STOP_CODE\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Invalid major type for indefinite length ' + majorType)\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t}\n\t}\n\tswitch (majorType) {\n\t\tcase 0: // positive int\n\t\t\treturn token\n\t\tcase 1: // negative int\n\t\t\treturn ~token\n\t\tcase 2: // buffer\n\t\t\treturn readBin(token)\n\t\tcase 3: // string\n\t\t\tif (srcStringEnd >= position) {\n\t\t\t\treturn srcString.slice(position - srcStringStart, (position += token) - srcStringStart)\n\t\t\t}\n\t\t\tif (srcStringEnd == 0 && srcEnd < 140 && token < 32) {\n\t\t\t\t// for small blocks, avoiding the overhead of the extract call is helpful\n\t\t\t\tlet string = token < 16 ? shortStringInJS(token) : longStringInJS(token)\n\t\t\t\tif (string != null)\n\t\t\t\t\treturn string\n\t\t\t}\n\t\t\treturn readFixedString(token)\n\t\tcase 4: // array\n\t\t\tlet array = new Array(token)\n\t\t  //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())\t\n\t\t\t//else \n\t\t\tfor (let i = 0; i < token; i++) array[i] = read()\n\t\t\treturn array\n\t\tcase 5: // map\n\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\tlet object = {}\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) object[safeKey(currentDecoder.decodeKey(read()))] = read()\n\t\t\t\telse for (let i = 0; i < token; i++) object[safeKey(read())] = read()\n\t\t\t\treturn object\n\t\t\t} else {\n\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t}\n\t\t\t\tlet map = new Map()\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) map.set(currentDecoder.decodeKey(read()),read())\n\t\t\t\telse for (let i = 0; i < token; i++) map.set(read(), read())\n\t\t\t\treturn map\n\t\t\t}\n\t\tcase 6: // extension\n\t\t\tif (token >= BUNDLED_STRINGS_ID) {\n\t\t\t\tlet structure = currentStructures[token & 0x1fff] // check record structures first\n\t\t\t\t// At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))\n\t\t\t\tif (structure) {\n\t\t\t\t\tif (!structure.read) structure.read = createStructureReader(structure)\n\t\t\t\t\treturn structure.read()\n\t\t\t\t}\n\t\t\t\tif (token < 0x10000) {\n\t\t\t\t\tif (token == RECORD_INLINE_ID) { // we do a special check for this so that we can keep the\n\t\t\t\t\t\t// currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tlet structure = read()\n\t\t\t\t\t\trecordDefinition(id, structure)\n\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\tif (currentDecoder.keyMap) for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = currentDecoder.decodeKey(structure[i - 2])\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = structure[i - 2]\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn object\n\t\t\t\t\t}\n\t\t\t\t\telse if (token == RECORD_DEFINITIONS_ID) {\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tfor (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\trecordDefinition(id++, read())\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn read()\n\t\t\t\t\t} else if (token == BUNDLED_STRINGS_ID) {\n\t\t\t\t\t\treturn readBundleExt()\n\t\t\t\t\t}\n\t\t\t\t\tif (currentDecoder.getShared) {\n\t\t\t\t\t\tloadShared()\n\t\t\t\t\t\tstructure = currentStructures[token & 0x1fff]\n\t\t\t\t\t\tif (structure) {\n\t\t\t\t\t\t\tif (!structure.read)\n\t\t\t\t\t\t\t\tstructure.read = createStructureReader(structure)\n\t\t\t\t\t\t\treturn structure.read()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet extension = currentExtensions[token]\n\t\t\tif (extension) {\n\t\t\t\tif (extension.handlesRead)\n\t\t\t\t\treturn extension(read)\n\t\t\t\telse\n\t\t\t\t\treturn extension(read())\n\t\t\t} else {\n\t\t\t\tlet input = read()\n\t\t\t\tfor (let i = 0; i < currentExtensionRanges.length; i++) {\n\t\t\t\t\tlet value = currentExtensionRanges[i](token, input)\n\t\t\t\t\tif (value !== undefined)\n\t\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\treturn new Tag(input, token)\n\t\t\t}\n\t\tcase 7: // fixed value\n\t\t\tswitch (token) {\n\t\t\t\tcase 0x14: return false\n\t\t\t\tcase 0x15: return true\n\t\t\t\tcase 0x16: return null\n\t\t\t\tcase 0x17: return; // undefined\n\t\t\t\tcase 0x1f:\n\t\t\t\tdefault:\n\t\t\t\t\tlet packedValue = (packedValues || getPackedValues())[token]\n\t\t\t\t\tif (packedValue !== undefined)\n\t\t\t\t\t\treturn packedValue\n\t\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t\t}\n\t\tdefault: // negative int\n\t\t\tif (isNaN(token)) {\n\t\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\t\terror.incomplete = true\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\tthrow new Error('Unknown CBOR token ' + token)\n\t}\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/\nfunction createStructureReader(structure) {\n\tfunction readObject() {\n\t\t// get the array size from the header\n\t\tlet length = src[position++]\n\t\t//let majorType = token >> 5\n\t\tlength = length & 0x1f\n\t\tif (length > 0x17) {\n\t\t\tswitch (length) {\n\t\t\t\tcase 0x18:\n\t\t\t\t\tlength = src[position++]\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x19:\n\t\t\t\t\tlength = dataView.getUint16(position)\n\t\t\t\t\tposition += 2\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x1a:\n\t\t\t\t\tlength = dataView.getUint32(position)\n\t\t\t\t\tposition += 4\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Expected array header, but got ' + src[position - 1])\n\t\t\t}\n\t\t}\n\t\t// This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n\t\tlet compiledReader = this.compiledReader // first look to see if we have the fast compiled function\n\t\twhile(compiledReader) {\n\t\t\t// we have a fast compiled object literal reader\n\t\t\tif (compiledReader.propertyCount === length)\n\t\t\t\treturn compiledReader(read) // with the right length, so we use it\n\t\t\tcompiledReader = compiledReader.next // see if there is another reader with the right length\n\t\t}\n\t\tif (this.slowReads++ >= inlineObjectReadThreshold) { // create a fast compiled reader\n\t\t\tlet array = this.length == length ? this : this.slice(0, length)\n\t\t\tcompiledReader = currentDecoder.keyMap \n\t\t\t? new Function('r', 'return {' + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + ':r()' : ('[' + JSON.stringify(k) + ']:r()')).join(',') + '}')\n\t\t\t: new Function('r', 'return {' + array.map(key => validName.test(key) ? safeKey(key) + ':r()' : ('[' + JSON.stringify(key) + ']:r()')).join(',') + '}')\n\t\t\tif (this.compiledReader)\n\t\t\t\tcompiledReader.next = this.compiledReader // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure\n\t\t\tcompiledReader.propertyCount = length\n\t\t\tthis.compiledReader = compiledReader\n\t\t\treturn compiledReader(read)\n\t\t}\n\t\tlet object = {}\n\t\tif (currentDecoder.keyMap) for (let i = 0; i < length; i++) object[safeKey(currentDecoder.decodeKey(this[i]))] = read()\n\t\telse for (let i = 0; i < length; i++) {\n\t\t\tobject[safeKey(this[i])] = read();\n\t\t}\n\t\treturn object\n\t}\n\tstructure.slowReads = 0\n\treturn readObject\n}\n\nfunction safeKey(key) {\n\treturn key === '__proto__' ? '__proto_' : key\n}\n\nlet readFixedString = readStringJS\nlet readString8 = readStringJS\nlet readString16 = readStringJS\nlet readString32 = readStringJS\n\nexport let isNativeAccelerationEnabled = false\nexport function setExtractor(extractStrings) {\n\tisNativeAccelerationEnabled = true\n\treadFixedString = readString(1)\n\treadString8 = readString(2)\n\treadString16 = readString(3)\n\treadString32 = readString(5)\n\tfunction readString(headerLength) {\n\t\treturn function readString(length) {\n\t\t\tlet string = strings[stringPosition++]\n\t\t\tif (string == null) {\n\t\t\t\tif (bundledStrings)\n\t\t\t\t\treturn readStringJS(length)\n\t\t\t\tlet extraction = extractStrings(position, srcEnd, length, src)\n\t\t\t\tif (typeof extraction == 'string') {\n\t\t\t\t\tstring = extraction\n\t\t\t\t\tstrings = EMPTY_ARRAY\n\t\t\t\t} else {\n\t\t\t\t\tstrings = extraction\n\t\t\t\t\tstringPosition = 1\n\t\t\t\t\tsrcStringEnd = 1 // even if a utf-8 string was decoded, must indicate we are in the midst of extracted strings and can't skip strings\n\t\t\t\t\tstring = strings[0]\n\t\t\t\t\tif (string === undefined)\n\t\t\t\t\t\tthrow new Error('Unexpected end of buffer')\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet srcStringLength = string.length\n\t\t\tif (srcStringLength <= length) {\n\t\t\t\tposition += length\n\t\t\t\treturn string\n\t\t\t}\n\t\t\tsrcString = string\n\t\t\tsrcStringStart = position\n\t\t\tsrcStringEnd = position + srcStringLength\n\t\t\tposition += length\n\t\t\treturn string.slice(0, length) // we know we just want the beginning\n\t\t}\n\t}\n}\nfunction readStringJS(length) {\n\tlet result\n\tif (length < 16) {\n\t\tif (result = shortStringInJS(length))\n\t\t\treturn result\n\t}\n\tif (length > 64 && decoder)\n\t\treturn decoder.decode(src.subarray(position, position += length))\n\tconst end = position + length\n\tconst units = []\n\tresult = ''\n\twhile (position < end) {\n\t\tconst byte1 = src[position++]\n\t\tif ((byte1 & 0x80) === 0) {\n\t\t\t// 1 byte\n\t\t\tunits.push(byte1)\n\t\t} else if ((byte1 & 0xe0) === 0xc0) {\n\t\t\t// 2 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 6) | byte2)\n\t\t} else if ((byte1 & 0xf0) === 0xe0) {\n\t\t\t// 3 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3)\n\t\t} else if ((byte1 & 0xf8) === 0xf0) {\n\t\t\t// 4 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tconst byte4 = src[position++] & 0x3f\n\t\t\tlet unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4\n\t\t\tif (unit > 0xffff) {\n\t\t\t\tunit -= 0x10000\n\t\t\t\tunits.push(((unit >>> 10) & 0x3ff) | 0xd800)\n\t\t\t\tunit = 0xdc00 | (unit & 0x3ff)\n\t\t\t}\n\t\t\tunits.push(unit)\n\t\t} else {\n\t\t\tunits.push(byte1)\n\t\t}\n\n\t\tif (units.length >= 0x1000) {\n\t\t\tresult += fromCharCode.apply(String, units)\n\t\t\tunits.length = 0\n\t\t}\n\t}\n\n\tif (units.length > 0) {\n\t\tresult += fromCharCode.apply(String, units)\n\t}\n\n\treturn result\n}\nlet fromCharCode = String.fromCharCode\nfunction longStringInJS(length) {\n\tlet start = position\n\tlet bytes = new Array(length)\n\tfor (let i = 0; i < length; i++) {\n\t\tconst byte = src[position++];\n\t\tif ((byte & 0x80) > 0) {\n\t\t\tposition = start\n    \t\t\treturn\n    \t\t}\n    \t\tbytes[i] = byte\n    \t}\n    \treturn fromCharCode.apply(String, bytes)\n}\nfunction shortStringInJS(length) {\n\tif (length < 4) {\n\t\tif (length < 2) {\n\t\t\tif (length === 0)\n\t\t\t\treturn ''\n\t\t\telse {\n\t\t\t\tlet a = src[position++]\n\t\t\t\tif ((a & 0x80) > 1) {\n\t\t\t\t\tposition -= 1\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a)\n\t\t\t}\n\t\t} else {\n\t\t\tlet a = src[position++]\n\t\t\tlet b = src[position++]\n\t\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0) {\n\t\t\t\tposition -= 2\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 3)\n\t\t\t\treturn fromCharCode(a, b)\n\t\t\tlet c = src[position++]\n\t\t\tif ((c & 0x80) > 0) {\n\t\t\t\tposition -= 3\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c)\n\t\t}\n\t} else {\n\t\tlet a = src[position++]\n\t\tlet b = src[position++]\n\t\tlet c = src[position++]\n\t\tlet d = src[position++]\n\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n\t\t\tposition -= 4\n\t\t\treturn\n\t\t}\n\t\tif (length < 6) {\n\t\t\tif (length === 4)\n\t\t\t\treturn fromCharCode(a, b, c, d)\n\t\t\telse {\n\t\t\t\tlet e = src[position++]\n\t\t\t\tif ((e & 0x80) > 0) {\n\t\t\t\t\tposition -= 5\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e)\n\t\t\t}\n\t\t} else if (length < 8) {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0) {\n\t\t\t\tposition -= 6\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 7)\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f)\n\t\t\tlet g = src[position++]\n\t\t\tif ((g & 0x80) > 0) {\n\t\t\t\tposition -= 7\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c, d, e, f, g)\n\t\t} else {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tlet g = src[position++]\n\t\t\tlet h = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n\t\t\t\tposition -= 8\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 10) {\n\t\t\t\tif (length === 8)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h)\n\t\t\t\telse {\n\t\t\t\t\tlet i = src[position++]\n\t\t\t\t\tif ((i & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 9\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i)\n\t\t\t\t}\n\t\t\t} else if (length < 12) {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0) {\n\t\t\t\t\tposition -= 10\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 11)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j)\n\t\t\t\tlet k = src[position++]\n\t\t\t\tif ((k & 0x80) > 0) {\n\t\t\t\t\tposition -= 11\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k)\n\t\t\t} else {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tlet k = src[position++]\n\t\t\t\tlet l = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n\t\t\t\t\tposition -= 12\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 14) {\n\t\t\t\t\tif (length === 12)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l)\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\t\tif ((m & 0x80) > 0) {\n\t\t\t\t\t\t\tposition -= 13\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\tlet n = src[position++]\n\t\t\t\t\tif ((m & 0x80) > 0 || (n & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 14\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif (length < 15)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n)\n\t\t\t\t\tlet o = src[position++]\n\t\t\t\t\tif ((o & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 15\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction readBin(length) {\n\treturn currentDecoder.copyBuffers ?\n\t\t// specifically use the copying slice (not the node one)\n\t\tUint8Array.prototype.slice.call(src, position, position += length) :\n\t\tsrc.subarray(position, position += length)\n}\nfunction readExt(length) {\n\tlet type = src[position++]\n\tif (currentExtensions[type]) {\n\t\treturn currentExtensions[type](src.subarray(position, position += length))\n\t}\n\telse\n\t\tthrow new Error('Unknown extension type ' + type)\n}\nlet f32Array = new Float32Array(1)\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4)\nfunction getFloat16() {\n\tlet byte0 = src[position++]\n\tlet byte1 = src[position++]\n\tlet exponent = (byte0 & 0x7f) >> 2;\n\tif (exponent === 0x1f) { // specials\n\t\tif (byte1 || (byte0 & 3))\n\t\t\treturn NaN;\n\t\treturn (byte0 & 0x80) ? -Infinity : Infinity;\n\t}\n\tif (exponent === 0) { // sub-normals\n\t\t// significand with 10 fractional bits and divided by 2^14\n\t\tlet abs = (((byte0 & 3) << 8) | byte1) / (1 << 24)\n\t\treturn (byte0 & 0x80) ? -abs : abs\n\t}\n\n\tu8Array[3] = (byte0 & 0x80) | // sign bit\n\t\t((exponent >> 1) + 56) // 4 of 5 of the exponent bits, re-offset-ed\n\tu8Array[2] = ((byte0 & 7) << 5) | // last exponent bit and first two mantissa bits\n\t\t(byte1 >> 3) // next 5 bits of mantissa\n\tu8Array[1] = byte1 << 5; // last three bits of mantissa\n\tu8Array[0] = 0;\n\treturn f32Array[0];\n}\n\nlet keyCache = new Array(4096)\nfunction readKey() {\n\tlet length = src[position++]\n\tif (length >= 0x60 && length < 0x78) {\n\t\t// fixstr, potentially use key cache\n\t\tlength = length - 0x60\n\t\tif (srcStringEnd >= position) // if it has been extracted, must use it (and faster anyway)\n\t\t\treturn srcString.slice(position - srcStringStart, (position += length) - srcStringStart)\n\t\telse if (!(srcStringEnd == 0 && srcEnd < 180))\n\t\t\treturn readFixedString(length)\n\t} else { // not cacheable, go back and do a standard read\n\t\tposition--\n\t\treturn read()\n\t}\n\tlet key = ((length << 5) ^ (length > 1 ? dataView.getUint16(position) : length > 0 ? src[position] : 0)) & 0xfff\n\tlet entry = keyCache[key]\n\tlet checkPosition = position\n\tlet end = position + length - 3\n\tlet chunk\n\tlet i = 0\n\tif (entry && entry.bytes == length) {\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = dataView.getUint32(checkPosition)\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcheckPosition += 4\n\t\t}\n\t\tend += 3\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = src[checkPosition++]\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (checkPosition === end) {\n\t\t\tposition = checkPosition\n\t\t\treturn entry.string\n\t\t}\n\t\tend -= 3\n\t\tcheckPosition = position\n\t}\n\tentry = []\n\tkeyCache[key] = entry\n\tentry.bytes = length\n\twhile (checkPosition < end) {\n\t\tchunk = dataView.getUint32(checkPosition)\n\t\tentry.push(chunk)\n\t\tcheckPosition += 4\n\t}\n\tend += 3\n\twhile (checkPosition < end) {\n\t\tchunk = src[checkPosition++]\n\t\tentry.push(chunk)\n\t}\n\t// for small blocks, avoiding the overhead of the extract call is helpful\n\tlet string = length < 16 ? shortStringInJS(length) : longStringInJS(length)\n\tif (string != null)\n\t\treturn entry.string = string\n\treturn entry.string = readFixedString(length)\n}\n\nexport class Tag {\n\tconstructor(value, tag) {\n\t\tthis.value = value\n\t\tthis.tag = tag\n\t}\n}\n\ncurrentExtensions[0] = (dateString) => {\n\t// string date extension\n\treturn new Date(dateString)\n}\n\ncurrentExtensions[1] = (epochSec) => {\n\t// numeric date extension\n\treturn new Date(Math.round(epochSec * 1000))\n}\n\ncurrentExtensions[2] = (buffer) => {\n\t// bigint extension\n\tlet value = BigInt(0)\n\tfor (let i = 0, l = buffer.byteLength; i < l; i++) {\n\t\tvalue = BigInt(buffer[i]) + value << BigInt(8)\n\t}\n\treturn value\n}\n\ncurrentExtensions[3] = (buffer) => {\n\t// negative bigint extension\n\treturn BigInt(-1) - currentExtensions[2](buffer)\n}\ncurrentExtensions[4] = (fraction) => {\n\t// best to reparse to maintain accuracy\n\treturn +(fraction[1] + 'e' + fraction[0])\n}\n\ncurrentExtensions[5] = (fraction) => {\n\t// probably not sufficiently accurate\n\treturn fraction[1] * Math.exp(fraction[0] * Math.log(2))\n}\n\n// the registration of the record definition extension\nconst recordDefinition = (id, structure) => {\n\tid = id - 0xe000\n\tlet existingStructure = currentStructures[id]\n\tif (existingStructure && existingStructure.isShared) {\n\t\t(currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure\n\t}\n\tcurrentStructures[id] = structure\n\n\tstructure.read = createStructureReader(structure)\n}\ncurrentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {\n\tlet length = data.length\n\tlet structure = data[1]\n\trecordDefinition(data[0], structure)\n\tlet object = {}\n\tfor (let i = 2; i < length; i++) {\n\t\tlet key = structure[i - 2]\n\t\tobject[safeKey(key)] = data[i]\n\t}\n\treturn object\n}\ncurrentExtensions[14] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value)\n\treturn new Tag(value, 14)\n}\ncurrentExtensions[15] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value)\n\treturn new Tag(value, 15)\n}\nlet glbl = { Error, RegExp }\ncurrentExtensions[27] = (data) => { // http://cbor.schmorp.de/generic-object\n\treturn (glbl[data[0]] || Error)(data[1], data[2])\n}\nconst packedTable = (read) => {\n\tif (src[position++] != 0x84) {\n\t\tlet error = new Error('Packed values structure must be followed by a 4 element array')\n\t\tif (src.length < position)\n\t\t\terror.incomplete = true\n\t\tthrow error\n\t}\n\tlet newPackedValues = read() // packed values\n\tif (!newPackedValues || !newPackedValues.length) {\n\t\tlet error = new Error('Packed values structure must be followed by a 4 element array')\n\t\terror.incomplete = true\n\t\tthrow error\n\t}\n\tpackedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues\n\tpackedValues.prefixes = read()\n\tpackedValues.suffixes = read()\n\treturn read() // read the rump\n}\npackedTable.handlesRead = true\ncurrentExtensions[51] = packedTable\n\ncurrentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => { // packed reference\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\treturn new Tag(data, PACKED_REFERENCE_TAG_ID)\n\t}\n\tif (typeof data == 'number')\n\t\treturn packedValues[16 + (data >= 0 ? 2 * data : (-2 * data - 1))]\n\tlet error = new Error('No support for non-integer packed references yet')\n\tif (data === undefined)\n\t\terror.incomplete = true\n\tthrow error\n}\n\n// The following code is an incomplete implementation of http://cbor.schmorp.de/stringref\n// the real thing would need to implemennt more logic to populate the stringRefs table and\n// maintain a stack of stringRef \"namespaces\".\n//\n// currentExtensions[25] = (id) => {\n// \treturn stringRefs[id]\n// }\n// currentExtensions[256] = (read) => {\n// \tstringRefs = []\n// \ttry {\n// \t\treturn read()\n// \t} finally {\n// \t\tstringRefs = null\n// \t}\n// }\n// currentExtensions[256].handlesRead = true\n\ncurrentExtensions[28] = (read) => { \n\t// shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n\tif (!referenceMap) {\n\t\treferenceMap = new Map()\n\t\treferenceMap.id = 0\n\t}\n\tlet id = referenceMap.id++\n\tlet token = src[position]\n\tlet target\n\t// TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n\t// ahead past references to record structure definitions\n\tif ((token >> 5) == 4)\n\t\ttarget = []\n\telse\n\t\ttarget = {}\n\n\tlet refEntry = { target } // a placeholder object\n\treferenceMap.set(id, refEntry)\n\tlet targetProperties = read() // read the next value as the target object to id\n\tif (refEntry.used) // there is a cycle, so we have to assign properties to original target\n\t\treturn Object.assign(target, targetProperties)\n\trefEntry.target = targetProperties // the placeholder wasn't used, replace with the deserialized one\n\treturn targetProperties // no cycle, can just use the returned read object\n}\ncurrentExtensions[28].handlesRead = true\n\ncurrentExtensions[29] = (id) => {\n\t// sharedref http://cbor.schmorp.de/value-sharing (for structured clones)\n\tlet refEntry = referenceMap.get(id)\n\trefEntry.used = true\n\treturn refEntry.target\n}\n\ncurrentExtensions[258] = (array) => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n(currentExtensions[259] = (read) => {\n\t// https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec\n\t// for decoding as a standard Map\n\tif (currentDecoder.mapsAsObjects) {\n\t\tcurrentDecoder.mapsAsObjects = false\n\t\trestoreMapsAsObject = true\n\t}\n\treturn read()\n}).handlesRead = true\nfunction combine(a, b) {\n\tif (typeof a === 'string')\n\t\treturn a + b\n\tif (a instanceof Array)\n\t\treturn a.concat(b)\n\treturn Object.assign({}, a, b)\n}\nfunction getPackedValues() {\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\tthrow new Error('No packed values available')\n\t}\n\treturn packedValues\n}\nconst SHARED_DATA_TAG_ID = 0x53687264 // ascii 'Shrd'\ncurrentExtensionRanges.push((tag, input) => {\n\tif (tag >= 225 && tag <= 255)\n\t\treturn combine(getPackedValues().prefixes[tag - 224], input)\n\tif (tag >= 28704 && tag <= 32767)\n\t\treturn combine(getPackedValues().prefixes[tag - 28672], input)\n\tif (tag >= 1879052288 && tag <= 2147483647)\n\t\treturn combine(getPackedValues().prefixes[tag - 1879048192], input)\n\tif (tag >= 216 && tag <= 223)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 216])\n\tif (tag >= 27647 && tag <= 28671)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 27639])\n\tif (tag >= 1811940352 && tag <= 1879048191)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 1811939328])\n\tif (tag == SHARED_DATA_TAG_ID) {// we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\treturn {\n\t\t\tpackedValues: packedValues,\n\t\t\tstructures: currentStructures.slice(0),\n\t\t\tversion: input,\n\t\t}\n\t}\n\tif (tag == 55799) // self-descriptive CBOR tag, just return input value\n\t\treturn input\n})\n\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nexport const typedArrays = [Uint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? { name:'BigUint64Array' } : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? { name:'BigInt64Array' } : BigInt64Array, Float32Array, Float64Array]\nconst typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86]\nfor (let i = 0; i < typedArrays.length; i++) {\n\tregisterTypedArray(typedArrays[i], typedArrayTags[i])\n}\nfunction registerTypedArray(TypedArray, tag) {\n\tlet dvMethod = 'get' + TypedArray.name.slice(0, -5)\n\tlet bytesPerElement;\n\tif (typeof TypedArray === 'function')\n\t\tbytesPerElement = TypedArray.BYTES_PER_ELEMENT;\n\telse\n\t\tTypedArray = null;\n\tfor (let littleEndian = 0; littleEndian < 2; littleEndian++) {\n\t\tif (!littleEndian && bytesPerElement == 1)\n\t\t\tcontinue\n\t\tlet sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3\n\t\tcurrentExtensions[littleEndian ? tag : (tag - 4)] = (bytesPerElement == 1 || littleEndian == isLittleEndianMachine) ? (buffer) => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\tif (!currentDecoder.copyBuffers) {\n\t\t\t\t// try provide a direct view, but will only work if we are byte-aligned\n\t\t\t\tif (bytesPerElement === 1 ||\n\t\t\t\t\tbytesPerElement === 2 && !(buffer.byteOffset & 1) ||\n\t\t\t\t\tbytesPerElement === 4 && !(buffer.byteOffset & 3) ||\n\t\t\t\t\tbytesPerElement === 8 && !(buffer.byteOffset & 7))\n\t\t\t\t\treturn new TypedArray(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\t\t\t}\n\t\t\t// we have to slice/copy here to get a new ArrayBuffer, if we are not word/byte aligned\n\t\t\treturn new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer)\n\t\t} : buffer => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\tlet dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\t\t\tlet elements = buffer.length >> sizeShift\n\t\t\tlet ta = new TypedArray(elements)\n\t\t\tlet method = dv[dvMethod]\n\t\t\tfor (let i = 0; i < elements; i++) {\n\t\t\t\tta[i] = method.call(dv, i << sizeShift, littleEndian)\n\t\t\t}\n\t\t\treturn ta\n\t\t}\n\t}\n}\n\nfunction readBundleExt() {\n\tlet length = readJustLength()\n\tlet bundlePosition = position + read()\n\tfor (let i = 2; i < length; i++) {\n\t\t// skip past bundles that were already read\n\t\tlet bundleLength = readJustLength() // this will increment position, so must add to position afterwards\n\t\tposition += bundleLength\n\t}\n\tlet dataPosition = position\n\tposition = bundlePosition\n\tbundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())]\n\tbundledStrings.position0 = 0\n\tbundledStrings.position1 = 0\n\tbundledStrings.postBundlePosition = position\n\tposition = dataPosition\n\treturn read()\n}\n\nfunction readJustLength() {\n\tlet token = src[position++] & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t}\n\t}\n\treturn token\n}\n\nfunction loadShared() {\n\tif (currentDecoder.getShared) {\n\t\tlet sharedData = saveState(() => {\n\t\t\t// save the state in case getShared modifies our buffer\n\t\t\tsrc = null\n\t\t\treturn currentDecoder.getShared()\n\t\t}) || {}\n\t\tlet updatedStructures = sharedData.structures || []\n\t\tcurrentDecoder.sharedVersion = sharedData.version\n\t\tpackedValues = currentDecoder.sharedValues = sharedData.packedValues\n\t\tif (currentStructures === true)\n\t\t\tcurrentDecoder.structures = currentStructures = updatedStructures\n\t\telse\n\t\t\tcurrentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures))\n\t}\n}\n\nfunction saveState(callback) {\n\tlet savedSrcEnd = srcEnd\n\tlet savedPosition = position\n\tlet savedStringPosition = stringPosition\n\tlet savedSrcStringStart = srcStringStart\n\tlet savedSrcStringEnd = srcStringEnd\n\tlet savedSrcString = srcString\n\tlet savedStrings = strings\n\tlet savedReferenceMap = referenceMap\n\tlet savedBundledStrings = bundledStrings\n\n\t// TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n\tlet savedSrc = new Uint8Array(src.slice(0, srcEnd)) // we copy the data in case it changes while external data is processed\n\tlet savedStructures = currentStructures\n\tlet savedDecoder = currentDecoder\n\tlet savedSequentialMode = sequentialMode\n\tlet value = callback()\n\tsrcEnd = savedSrcEnd\n\tposition = savedPosition\n\tstringPosition = savedStringPosition\n\tsrcStringStart = savedSrcStringStart\n\tsrcStringEnd = savedSrcStringEnd\n\tsrcString = savedSrcString\n\tstrings = savedStrings\n\treferenceMap = savedReferenceMap\n\tbundledStrings = savedBundledStrings\n\tsrc = savedSrc\n\tsequentialMode = savedSequentialMode\n\tcurrentStructures = savedStructures\n\tcurrentDecoder = savedDecoder\n\tdataView = new DataView(src.buffer, src.byteOffset, src.byteLength)\n\treturn value\n}\nexport function clearSource() {\n\tsrc = null\n\treferenceMap = null\n\tcurrentStructures = null\n}\n\nexport function addExtension(extension) {\n\tcurrentExtensions[extension.tag] = extension.decode\n}\n\nexport const mult10 = new Array(147) // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor (let i = 0; i < 256; i++) {\n\tmult10[i] = +('1e' + Math.floor(45.15 - i * 0.30103))\n}\nlet defaultDecoder = new Decoder({ useRecords: false })\nexport const decode = defaultDecoder.decode\nexport const decodeMultiple = defaultDecoder.decodeMultiple\nexport const FLOAT32_OPTIONS = {\n\tNEVER: 0,\n\tALWAYS: 1,\n\tDECIMAL_ROUND: 3,\n\tDECIMAL_FIT: 4\n}\nexport function roundFloat32(float32Number) {\n\tf32Array[0] = float32Number\n\tlet multiplier = mult10[((u8Array[3] & 0x7f) << 1) | (u8Array[2] >> 7)]\n\treturn ((multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n}\n","import { Decoder, mult10, Tag, typedArrays, addExtension as decodeAddExtension } from './decode.js'\nlet textEncoder\ntry {\n\ttextEncoder = new TextEncoder()\n} catch (error) {}\nlet extensions, extensionClasses\nconst Buffer = typeof globalThis === 'object' && globalThis.Buffer;\nconst hasNodeBuffer = typeof Buffer !== 'undefined'\nconst ByteArrayAllocate = hasNodeBuffer ? Buffer.allocUnsafeSlow : Uint8Array\nconst ByteArray = hasNodeBuffer ? Buffer : Uint8Array\nconst MAX_STRUCTURES = 0x100\nconst MAX_BUFFER_SIZE = hasNodeBuffer ? 0x100000000 : 0x7fd00000\nlet serializationId = 1\nlet throwOnIterable\nlet target\nlet targetView\nlet position = 0\nlet safeEnd\nlet bundledStrings = null\nconst MAX_BUNDLE_SIZE = 0xf000\nconst hasNonLatin = /[\\u0080-\\uFFFF]/\nconst RECORD_SYMBOL = Symbol('record-id')\nexport class Encoder extends Decoder {\n\tconstructor(options) {\n\t\tsuper(options)\n\t\tthis.offset = 0\n\t\tlet typeBuffer\n\t\tlet start\n\t\tlet sharedStructures\n\t\tlet hasSharedUpdate\n\t\tlet structures\n\t\tlet referenceMap\n\t\toptions = options || {}\n\t\tlet encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position, maxBytes) {\n\t\t\treturn target.utf8Write(string, position, maxBytes)\n\t\t} : (textEncoder && textEncoder.encodeInto) ?\n\t\t\tfunction(string, position) {\n\t\t\t\treturn textEncoder.encodeInto(string, target.subarray(position)).written\n\t\t\t} : false\n\n\t\tlet encoder = this\n\t\tlet hasSharedStructures = options.structures || options.saveStructures\n\t\tlet maxSharedStructures = options.maxSharedStructures\n\t\tif (maxSharedStructures == null)\n\t\t\tmaxSharedStructures = hasSharedStructures ? 128 : 0\n\t\tif (maxSharedStructures > 8190)\n\t\t\tthrow new Error('Maximum maxSharedStructure is 8190')\n\t\tlet isSequential = options.sequential\n\t\tif (isSequential) {\n\t\t\tmaxSharedStructures = 0\n\t\t}\n\t\tif (!this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.saveStructures)\n\t\t\tthis.saveShared = this.saveStructures\n\t\tlet samplingPackedValues, packedObjectMap, sharedValues = options.sharedValues\n\t\tlet sharedPackedObjectMap\n\t\tif (sharedValues) {\n\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++) {\n\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t}\n\t\t}\n\t\tlet recordIdsToRemove = []\n\t\tlet transitionsCount = 0\n\t\tlet serializationsSinceTransitionRebuild = 0\n\t\t\n\t\tthis.mapEncode = function(value, encodeOptions) {\n\t\t\t// Experimental support for premapping keys using _keyMap instad of keyMap - not optiimised yet)\n\t\t\tif (this._keyMap && !this._mapped) {\n\t\t\t\t//console.log('encoding ', value)\n\t\t\t\tswitch (value.constructor.name) {\n\t\t\t\t\tcase 'Array': \n\t\t\t\t\t\tvalue = value.map(r => this.encodeKeys(r))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t//case 'Map': \n\t\t\t\t\t//\tvalue = this.encodeKeys(value)\n\t\t\t\t\t//\tbreak\n\t\t\t\t}\n\t\t\t\t//this._mapped = true\n\t\t\t}\n\t\t\treturn this.encode(value, encodeOptions)\n\t\t}\n\t\t\n\t\tthis.encode = function(value, encodeOptions)\t{\n\t\t\tif (!target) {\n\t\t\t\ttarget = new ByteArrayAllocate(8192)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, 8192)\n\t\t\t\tposition = 0\n\t\t\t}\n\t\t\tsafeEnd = target.length - 10\n\t\t\tif (safeEnd - position < 0x800) {\n\t\t\t\t// don't start too close to the end, \n\t\t\t\ttarget = new ByteArrayAllocate(target.length)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, target.length)\n\t\t\t\tsafeEnd = target.length - 10\n\t\t\t\tposition = 0\n\t\t\t} else if (encodeOptions === REUSE_BUFFER_MODE)\n\t\t\t\tposition = (position + 7) & 0x7ffffff8 // Word align to make any future copying of this buffer faster\n\t\t\tstart = position\n\t\t\tif (encoder.useSelfDescribedHeader) {\n\t\t\t\ttargetView.setUint32(position, 0xd9d9f700) // tag two byte, then self-descriptive tag\n\t\t\t\tposition += 3\n\t\t\t}\n\t\t\treferenceMap = encoder.structuredClone ? new Map() : null\n\t\t\tif (encoder.bundleStrings && typeof value !== 'string') {\n\t\t\t\tbundledStrings = []\n\t\t\t\tbundledStrings.size = Infinity // force a new bundle start on first string\n\t\t\t} else\n\t\t\t\tbundledStrings = null\n\n\t\t\tsharedStructures = encoder.structures\n\t\t\tif (sharedStructures) {\n\t\t\t\tif (sharedStructures.uninitialized) {\n\t\t\t\t\tlet sharedData = encoder.getShared() || {}\n\t\t\t\t\tencoder.structures = sharedStructures = sharedData.structures || []\n\t\t\t\t\tencoder.sharedVersion = sharedData.version\n\t\t\t\t\tlet sharedValues = encoder.sharedValues = sharedData.packedValues\n\t\t\t\t\tif (sharedValues) {\n\t\t\t\t\t\tsharedPackedObjectMap = {}\n\t\t\t\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++)\n\t\t\t\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet sharedStructuresLength = sharedStructures.length\n\t\t\t\tif (sharedStructuresLength > maxSharedStructures && !isSequential)\n\t\t\t\t\tsharedStructuresLength = maxSharedStructures\n\t\t\t\tif (!sharedStructures.transitions) {\n\t\t\t\t\t// rebuild our structure transitions\n\t\t\t\t\tsharedStructures.transitions = Object.create(null)\n\t\t\t\t\tfor (let i = 0; i < sharedStructuresLength; i++) {\n\t\t\t\t\t\tlet keys = sharedStructures[i]\n\t\t\t\t\t\t//console.log('shared struct keys:', keys)\n\t\t\t\t\t\tif (!keys)\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tlet nextTransition, transition = sharedStructures.transitions\n\t\t\t\t\t\tfor (let j = 0, l = keys.length; j < l; j++) {\n\t\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined)\n\t\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i\n\t\t\t\t\t\t\tlet key = keys[j]\n\t\t\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i | 0x100000\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!isSequential)\n\t\t\t\t\tsharedStructures.nextId = sharedStructuresLength\n\t\t\t}\n\t\t\tif (hasSharedUpdate)\n\t\t\t\thasSharedUpdate = false\n\t\t\tstructures = sharedStructures || []\n\t\t\tpackedObjectMap = sharedPackedObjectMap\n\t\t\tif (options.pack) {\n\t\t\t\tlet packedValues = new Map()\n\t\t\t\tpackedValues.values = []\n\t\t\t\tpackedValues.encoder = encoder\n\t\t\t\tpackedValues.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap ? 16 : Infinity)\n\t\t\t\tpackedValues.objectMap = sharedPackedObjectMap || false\n\t\t\t\tpackedValues.samplingPackedValues = samplingPackedValues\n\t\t\t\tfindRepetitiveStrings(value, packedValues)\n\t\t\t\tif (packedValues.values.length > 0) {\n\t\t\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\twriteArrayHeader(4)\n\t\t\t\t\tlet valuesArray = packedValues.values\n\t\t\t\t\tencode(valuesArray)\n\t\t\t\t\twriteArrayHeader(0) // prefixes\n\t\t\t\t\twriteArrayHeader(0) // suffixes\n\t\t\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrowOnIterable = encodeOptions & THROW_ON_ITERABLE;\n\t\t\ttry {\n\t\t\t\tif (throwOnIterable)\n\t\t\t\t\treturn;\n\t\t\t\tencode(value)\n\t\t\t\tif (bundledStrings) {\n\t\t\t\t\twriteBundles(start, encode)\n\t\t\t\t}\n\t\t\t\tencoder.offset = position // update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially\n\t\t\t\tif (referenceMap && referenceMap.idsToInsert) {\n\t\t\t\t\tposition += referenceMap.idsToInsert.length * 2\n\t\t\t\t\tif (position > safeEnd)\n\t\t\t\t\t\tmakeRoom(position)\n\t\t\t\t\tencoder.offset = position\n\t\t\t\t\tlet serialized = insertIds(target.subarray(start, position), referenceMap.idsToInsert)\n\t\t\t\t\treferenceMap = null\n\t\t\t\t\treturn serialized\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & REUSE_BUFFER_MODE) {\n\t\t\t\t\ttarget.start = start\n\t\t\t\t\ttarget.end = position\n\t\t\t\t\treturn target\n\t\t\t\t}\n\t\t\t\treturn target.subarray(start, position) // position can change if we call encode again in saveShared, so we get the buffer now\n\t\t\t} finally {\n\t\t\t\tif (sharedStructures) {\n\t\t\t\t\tif (serializationsSinceTransitionRebuild < 10)\n\t\t\t\t\t\tserializationsSinceTransitionRebuild++\n\t\t\t\t\tif (sharedStructures.length > maxSharedStructures)\n\t\t\t\t\t\tsharedStructures.length = maxSharedStructures\n\t\t\t\t\tif (transitionsCount > 10000) {\n\t\t\t\t\t\t// force a rebuild occasionally after a lot of transitions so it can get cleaned up\n\t\t\t\t\t\tsharedStructures.transitions = null\n\t\t\t\t\t\tserializationsSinceTransitionRebuild = 0\n\t\t\t\t\t\ttransitionsCount = 0\n\t\t\t\t\t\tif (recordIdsToRemove.length > 0)\n\t\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t} else if (recordIdsToRemove.length > 0 && !isSequential) {\n\t\t\t\t\t\tfor (let i = 0, l = recordIdsToRemove.length; i < l; i++) {\n\t\t\t\t\t\t\trecordIdsToRemove[i][RECORD_SYMBOL] = undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t\t//sharedStructures.nextId = maxSharedStructures\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (hasSharedUpdate && encoder.saveShared) {\n\t\t\t\t\tif (encoder.structures.length > maxSharedStructures) {\n\t\t\t\t\t\tencoder.structures = encoder.structures.slice(0, maxSharedStructures)\n\t\t\t\t\t}\n\t\t\t\t\t// we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save\n\t\t\t\t\tlet returnBuffer = target.subarray(start, position)\n\t\t\t\t\tif (encoder.updateSharedData() === false)\n\t\t\t\t\t\treturn encoder.encode(value) // re-encode if it fails\n\t\t\t\t\treturn returnBuffer\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & RESET_BUFFER_MODE)\n\t\t\t\t\tposition = start\n\t\t\t}\n\t\t}\n\t\tthis.findCommonStringsToPack = () => {\n\t\t\tsamplingPackedValues = new Map()\n\t\t\tif (!sharedPackedObjectMap)\n\t\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\treturn (options) => {\n\t\t\t\tlet threshold = options && options.threshold || 4\n\t\t\t\tlet position = this.pack ? options.maxPrivatePackedValues || 16 : 0\n\t\t\t\tif (!sharedValues)\n\t\t\t\t\tsharedValues = this.sharedValues = []\n\t\t\t\tfor (let [ key, status ] of samplingPackedValues) {\n\t\t\t\t\tif (status.count > threshold) {\n\t\t\t\t\t\tsharedPackedObjectMap[key] = position++\n\t\t\t\t\t\tsharedValues.push(key)\n\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (this.saveShared && this.updateSharedData() === false) {}\n\t\t\t\tsamplingPackedValues = null\n\t\t\t}\n\t\t}\n\t\tconst encode = (value) => {\n\t\t\tif (position > safeEnd)\n\t\t\t\ttarget = makeRoom(position)\n\n\t\t\tvar type = typeof value\n\t\t\tvar length\n\t\t\tif (type === 'string') {\n\t\t\t\tif (packedObjectMap) {\n\t\t\t\t\tlet packedPosition = packedObjectMap[value]\n\t\t\t\t\tif (packedPosition >= 0) {\n\t\t\t\t\t\tif (packedPosition < 16)\n\t\t\t\t\t\t\ttarget[position++] = packedPosition + 0xe0 // simple values, defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttarget[position++] = 0xc6 // tag 6 defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\t\tif (packedPosition & 1)\n\t\t\t\t\t\t\t\tencode((15 - packedPosition) >> 1)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tencode((packedPosition - 16) >> 1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn\n/*\t\t\t\t\t\t} else if (packedStatus.serializationId != serializationId) {\n\t\t\t\t\t\t\tpackedStatus.serializationId = serializationId\n\t\t\t\t\t\t\tpackedStatus.count = 1\n\t\t\t\t\t\t\tif (options.sharedPack) {\n\t\t\t\t\t\t\t\tlet sharedCount = packedStatus.sharedCount = (packedStatus.sharedCount || 0) + 1\n\t\t\t\t\t\t\t\tif (shareCount > (options.sharedPack.threshold || 5)) {\n\t\t\t\t\t\t\t\t\tlet sharedPosition = packedStatus.position = packedStatus.nextSharedPosition\n\t\t\t\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t\t\t\t\tif (sharedPosition < 16)\n\t\t\t\t\t\t\t\t\t\ttarget[position++] = sharedPosition + 0xc0\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} // else any in-doc incrementation?*/\n\t\t\t\t\t} else if (samplingPackedValues && !options.pack) {\n\t\t\t\t\t\tlet status = samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tsamplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet strLength = value.length\n\t\t\t\tif (bundledStrings && strLength >= 4 && strLength < 0x400) {\n\t\t\t\t\tif ((bundledStrings.size += strLength) > MAX_BUNDLE_SIZE) {\n\t\t\t\t\t\tlet extStart\n\t\t\t\t\t\tlet maxBytes = (bundledStrings[0] ? bundledStrings[0].length * 3 + bundledStrings[1].length : 0) + 10\n\t\t\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\t\t\t\t\t\ttarget[position++] = 0xd9 // tag 16-bit\n\t\t\t\t\t\ttarget[position++] = 0xdf // tag 0xdff9\n\t\t\t\t\t\ttarget[position++] = 0xf9\n\t\t\t\t\t\t// TODO: If we only have one bundle with any string data, only write one string bundle\n\t\t\t\t\t\ttarget[position++] = bundledStrings.position ? 0x84 : 0x82 // array of 4 or 2 elements depending on if we write bundles\n\t\t\t\t\t\ttarget[position++] = 0x1a // 32-bit unsigned int\n\t\t\t\t\t\textStart = position - start\n\t\t\t\t\t\tposition += 4 // reserve for writing bundle reference\n\t\t\t\t\t\tif (bundledStrings.position) {\n\t\t\t\t\t\t\twriteBundles(start, encode) // write the last bundles\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbundledStrings = ['', ''] // create new ones\n\t\t\t\t\t\tbundledStrings.size = 0\n\t\t\t\t\t\tbundledStrings.position = extStart\n\t\t\t\t\t}\n\t\t\t\t\tlet twoByte = hasNonLatin.test(value)\n\t\t\t\t\tbundledStrings[twoByte ? 0 : 1] += value\n\t\t\t\t\ttarget[position++] = twoByte ? 0xce : 0xcf\n\t\t\t\t\tencode(strLength);\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlet headerSize\n\t\t\t\t// first we estimate the header size, so we can write to the correct location\n\t\t\t\tif (strLength < 0x20) {\n\t\t\t\t\theaderSize = 1\n\t\t\t\t} else if (strLength < 0x100) {\n\t\t\t\t\theaderSize = 2\n\t\t\t\t} else if (strLength < 0x10000) {\n\t\t\t\t\theaderSize = 3\n\t\t\t\t} else {\n\t\t\t\t\theaderSize = 5\n\t\t\t\t}\n\t\t\t\tlet maxBytes = strLength * 3\n\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\n\t\t\t\tif (strLength < 0x40 || !encodeUtf8) {\n\t\t\t\t\tlet i, c1, c2, strPosition = position + headerSize\n\t\t\t\t\tfor (i = 0; i < strLength; i++) {\n\t\t\t\t\t\tc1 = value.charCodeAt(i)\n\t\t\t\t\t\tif (c1 < 0x80) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1\n\t\t\t\t\t\t} else if (c1 < 0x800) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 | 0xc0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t(c1 & 0xfc00) === 0xd800 &&\n\t\t\t\t\t\t\t((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tc1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff)\n\t\t\t\t\t\t\ti++\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 18 | 0xf0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 | 0xe0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlength = strPosition - position - headerSize\n\t\t\t\t} else {\n\t\t\t\t\tlength = encodeUtf8(value, position + headerSize, maxBytes)\n\t\t\t\t}\n\n\t\t\t\tif (length < 0x18) {\n\t\t\t\t\ttarget[position++] = 0x60 | length\n\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\tif (headerSize < 2) {\n\t\t\t\t\t\ttarget.copyWithin(position + 2, position + 1, position + 1 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x78\n\t\t\t\t\ttarget[position++] = length\n\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\tif (headerSize < 3) {\n\t\t\t\t\t\ttarget.copyWithin(position + 3, position + 2, position + 2 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x79\n\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t} else {\n\t\t\t\t\tif (headerSize < 5) {\n\t\t\t\t\t\ttarget.copyWithin(position + 5, position + 3, position + 3 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x7a\n\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\tposition += 4\n\t\t\t\t}\n\t\t\t\tposition += length\n\t\t\t} else if (type === 'number') {\n\t\t\t\tif (!this.alwaysUseFloat && value >>> 0 === value) {// positive integer, 32-bit or less\n\t\t\t\t\t// positive uint\n\t\t\t\t\tif (value < 0x18) {\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x18\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x19\n\t\t\t\t\t\ttarget[position++] = value >> 8\n\t\t\t\t\t\ttarget[position++] = value & 0xff\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x1a\n\t\t\t\t\t\ttargetView.setUint32(position, value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else if (!this.alwaysUseFloat && value >> 0 === value) { // negative integer\n\t\t\t\t\tif (value >= -0x18) {\n\t\t\t\t\t\ttarget[position++] = 0x1f - value\n\t\t\t\t\t} else if (value >= -0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x38\n\t\t\t\t\t\ttarget[position++] = ~value\n\t\t\t\t\t} else if (value >= -0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x39\n\t\t\t\t\t\ttargetView.setUint16(position, ~value)\n\t\t\t\t\t\tposition += 2\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x3a\n\t\t\t\t\t\ttargetView.setUint32(position, ~value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet useFloat32\n\t\t\t\t\tif ((useFloat32 = this.useFloat32) > 0 && value < 0x100000000 && value >= -0x80000000) {\n\t\t\t\t\t\ttarget[position++] = 0xfa\n\t\t\t\t\t\ttargetView.setFloat32(position, value)\n\t\t\t\t\t\tlet xShifted\n\t\t\t\t\t\tif (useFloat32 < 4 ||\n\t\t\t\t\t\t\t\t// this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\t\t\t((xShifted = value * mult10[((target[position] & 0x7f) << 1) | (target[position + 1] >> 7)]) >> 0) === xShifted) {\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tposition-- // move back into position for writing a double\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\ttargetView.setFloat64(position, value)\n\t\t\t\t\tposition += 8\n\t\t\t\t}\n\t\t\t} else if (type === 'object') {\n\t\t\t\tif (!value)\n\t\t\t\t\ttarget[position++] = 0xf6\n\t\t\t\telse {\n\t\t\t\t\tif (referenceMap) {\n\t\t\t\t\t\tlet referee = referenceMap.get(value)\n\t\t\t\t\t\tif (referee) {\n\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\ttarget[position++] = 29 // http://cbor.schmorp.de/value-sharing\n\t\t\t\t\t\t\ttarget[position++] = 0x19 // 16-bit uint\n\t\t\t\t\t\t\tif (!referee.references) {\n\t\t\t\t\t\t\t\tlet idsToInsert = referenceMap.idsToInsert || (referenceMap.idsToInsert = [])\n\t\t\t\t\t\t\t\treferee.references = []\n\t\t\t\t\t\t\t\tidsToInsert.push(referee)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treferee.references.push(position - start)\n\t\t\t\t\t\t\tposition += 2 // TODO: also support 32-bit\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else \n\t\t\t\t\t\t\treferenceMap.set(value, { offset: position - start })\n\t\t\t\t\t}\n\t\t\t\t\tlet constructor = value.constructor\n\t\t\t\t\tif (constructor === Object) {\n\t\t\t\t\t\twriteObject(value, true)\n\t\t\t\t\t} else if (constructor === Array) {\n\t\t\t\t\t\tlength = value.length\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriteArrayHeader(length)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\t\tencode(value[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (constructor === Map) {\n\t\t\t\t\t\tif (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {\n\t\t\t\t\t\t\t// use Tag 259 (https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec--explicit-maps.md) for maps if the user wants it that way\n\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\ttarget[position++] = 1\n\t\t\t\t\t\t\ttarget[position++] = 3\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlength = value.size\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\t\t\t\ttarget[position++] = length\n\t\t\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[position++] = 0xba\n\t\t\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (encoder.keyMap) { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(key) \n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \t\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, l = extensions.length; i < l; i++) {\n\t\t\t\t\t\t\tlet extensionClass = extensionClasses[i]\n\t\t\t\t\t\t\tif (value instanceof extensionClass) {\n\t\t\t\t\t\t\t\tlet extension = extensions[i]\n\t\t\t\t\t\t\t\tlet tag = extension.tag\n\t\t\t\t\t\t\t\tif (tag == undefined)\n\t\t\t\t\t\t\t\t\ttag = extension.getTag && extension.getTag.call(this, value)\n\t\t\t\t\t\t\t\tif (tag < 0x18) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xc0 | tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x100) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x10000) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag >> 8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag & 0xff\n\t\t\t\t\t\t\t\t} else if (tag > -1) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xda\n\t\t\t\t\t\t\t\t\ttargetView.setUint32(position, tag)\n\t\t\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\t\t} // else undefined, don't write tag\n\t\t\t\t\t\t\t\textension.encode.call(this, value, encode, makeRoom)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.iterator]) {\n\t\t\t\t\t\t\tif (throwOnIterable) {\n\t\t\t\t\t\t\t\tlet error = new Error('Iterable should be serialized as iterator')\n\t\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0x9f // indefinite length array\n\t\t\t\t\t\t\tfor (let entry of value) {\n\t\t\t\t\t\t\t\tencode(entry)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0xff // stop-code\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.asyncIterator] || isBlob(value)) {\n\t\t\t\t\t\t\tlet error = new Error('Iterable/blob should be serialized as iterator')\n\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.useToJSON && value.toJSON) {\n\t\t\t\t\t\t\tconst json = value.toJSON()\n\t\t\t\t\t\t\t// if for some reason value.toJSON returns itself it'll loop forever\n\t\t\t\t\t\t\tif (json !== value)\n\t\t\t\t\t\t\t\treturn encode(json)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// no extension found, write as object\n\t\t\t\t\t\twriteObject(value, !value.hasOwnProperty) // if it doesn't have hasOwnProperty, don't do hasOwnProperty checks\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (type === 'boolean') {\n\t\t\t\ttarget[position++] = value ? 0xf5 : 0xf4\n\t\t\t} else if (type === 'bigint') {\n\t\t\t\tif (value < (BigInt(1)<<BigInt(64)) && value >= 0) {\n\t\t\t\t\t// use an unsigned int as long as it fits\n\t\t\t\t\ttarget[position++] = 0x1b\n\t\t\t\t\ttargetView.setBigUint64(position, value)\n\t\t\t\t} else if (value > -(BigInt(1)<<BigInt(64)) && value < 0) {\n\t\t\t\t\t// if we can fit an unsigned int, use that\n\t\t\t\t\ttarget[position++] = 0x3b\n\t\t\t\t\ttargetView.setBigUint64(position, -value - BigInt(1))\n\t\t\t\t} else {\n\t\t\t\t\t// overflow\n\t\t\t\t\tif (this.largeBigIntToFloat) {\n\t\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\t\ttargetView.setFloat64(position, Number(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new RangeError(value + ' was too large to fit in CBOR 64-bit integer format, set largeBigIntToFloat to convert to float-64')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tposition += 8\n\t\t\t} else if (type === 'undefined') {\n\t\t\t\ttarget[position++] = 0xf7\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown type: ' + type)\n\t\t\t}\n\t\t}\n\n\t\tconst writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {\n\t\t\t// this method is slightly slower, but generates \"preferred serialization\" (optimally small for smaller objects)\n\t\t\tlet keys = Object.keys(object)\n\t\t\tlet vals = Object.values(object)\n\t\t\tlet length = keys.length\n\t\t\tif (length < 0x18) {\n\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t} else if (length < 0x100) {\n\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\ttarget[position++] = length\n\t\t\t} else if (length < 0x10000) {\n\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t} else {\n\t\t\t\ttarget[position++] = 0xba\n\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\tposition += 4\n\t\t\t}\n\t\t\tlet key\n\t\t\tif (encoder.keyMap) { \n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(encoder.encodeKey(keys[i]))\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(keys[i])\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\t\t(object, safePrototype) => {\n\t\t\ttarget[position++] = 0xb9 // always use map 16, so we can preallocate and set the length afterwards\n\t\t\tlet objectOffset = position - start\n\t\t\tposition += 2\n\t\t\tlet size = 0\n\t\t\tif (encoder.keyMap) { \n\t\t\t\tfor (let key in object) if (safePrototype || object.hasOwnProperty(key)) {\n\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t} else { \n\t\t\t\tfor (let key in object) if (safePrototype || object.hasOwnProperty(key)) {\n\t\t\t\t\t\tencode(key)\n\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t}\n\t\t\ttarget[objectOffset++ + start] = size >> 8\n\t\t\ttarget[objectOffset + start] = size & 0xff\n\t\t} :\n\t\t(object, safePrototype) => {\n\t\t\tlet nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null))\n\t\t\tlet newTransitions = 0\n\t\t\tlet length = 0\n\t\t\tlet parentRecordId\n\t\t\tlet keys\n\t\t\tif (this.keyMap) {\n\t\t\t\tkeys = Object.keys(object).map(k => this.encodeKey(k))\n\t\t\t\tlength = keys.length\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet key = keys[i]\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\tfor (let key in object) if (safePrototype || object.hasOwnProperty(key)) {\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] & 0x100000) {// this indicates it is a brancheable/extendable terminal node, so we will use this record id and extend it\n\t\t\t\t\t\t\tparentRecordId = transition[RECORD_SYMBOL] & 0xffff\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\tlength++\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet recordId = transition[RECORD_SYMBOL]\n\t\t\tif (recordId !== undefined) {\n\t\t\t\trecordId &= 0xffff\n\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t} else {\n\t\t\t\tif (!keys)\n\t\t\t\t\tkeys = transition.__keys__ || (transition.__keys__ = Object.keys(object))\n\t\t\t\tif (parentRecordId === undefined) {\n\t\t\t\t\trecordId = structures.nextId++\n\t\t\t\t\tif (!recordId) {\n\t\t\t\t\t\trecordId = 0\n\t\t\t\t\t\tstructures.nextId = 1\n\t\t\t\t\t}\n\t\t\t\t\tif (recordId >= MAX_STRUCTURES) {// cycle back around\n\t\t\t\t\t\tstructures.nextId = (recordId = maxSharedStructures) + 1\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trecordId = parentRecordId\n\t\t\t\t}\n\t\t\t\tstructures[recordId] = keys\n\t\t\t\tif (recordId < maxSharedStructures) {\n\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t\t\ttransition = structures.transitions\n\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined || (transition[RECORD_SYMBOL] & 0x100000))\n\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\t\ttransition = transition[keys[i]]\n\t\t\t\t\t}\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId | 0x100000 // indicates it is a extendable terminal\n\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t} else {\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\ttargetView.setUint32(position, 0xd9dfff00) // tag two byte, then record definition id\n\t\t\t\t\tposition += 3\n\t\t\t\t\tif (newTransitions)\n\t\t\t\t\t\ttransitionsCount += serializationsSinceTransitionRebuild * newTransitions\n\t\t\t\t\t// record the removal of the id, we can maintain our shared structure\n\t\t\t\t\tif (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures)\n\t\t\t\t\t\trecordIdsToRemove.shift()[RECORD_SYMBOL] = undefined // we are cycling back through, and have to remove old ones\n\t\t\t\t\trecordIdsToRemove.push(transition)\n\t\t\t\t\twriteArrayHeader(length + 2)\n\t\t\t\t\tencode(0xe000 + recordId)\n\t\t\t\t\tencode(keys)\n\t\t\t\t\tif (safePrototype === null) return; // special exit for iterator\n\t\t\t\t\tfor (let key in object)\n\t\t\t\t\t\tif (safePrototype || object.hasOwnProperty(key))\n\t\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (length < 0x18) { // write the array header\n\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t} else {\n\t\t\t\twriteArrayHeader(length)\n\t\t\t}\n\t\t\tif (safePrototype === null) return; // special exit for iterator\n\t\t\tfor (let key in object)\n\t\t\t\tif (safePrototype || object.hasOwnProperty(key))\n\t\t\t\t\tencode(object[key])\n\t\t}\n\t\tconst makeRoom = (end) => {\n\t\t\tlet newSize\n\t\t\tif (end > 0x1000000) {\n\t\t\t\t// special handling for really large buffers\n\t\t\t\tif ((end - start) > MAX_BUFFER_SIZE)\n\t\t\t\t\tthrow new Error('Encoded buffer would be larger than maximum buffer size')\n\t\t\t\tnewSize = Math.min(MAX_BUFFER_SIZE,\n\t\t\t\t\tMath.round(Math.max((end - start) * (end > 0x4000000 ? 1.25 : 2), 0x400000) / 0x1000) * 0x1000)\n\t\t\t} else // faster handling for smaller buffers\n\t\t\t\tnewSize = ((Math.max((end - start) << 2, target.length - 1) >> 12) + 1) << 12\n\t\t\tlet newBuffer = new ByteArrayAllocate(newSize)\n\t\t\ttargetView = new DataView(newBuffer.buffer, 0, newSize)\n\t\t\tif (target.copy)\n\t\t\t\ttarget.copy(newBuffer, 0, start, end)\n\t\t\telse\n\t\t\t\tnewBuffer.set(target.slice(start, end))\n\t\t\tposition -= start\n\t\t\tstart = 0\n\t\t\tsafeEnd = newBuffer.length - 10\n\t\t\treturn target = newBuffer\n\t\t}\n\t\tlet chunkThreshold = 100;\n\t\tlet continuedChunkThreshold = 1000;\n\t\tthis.encodeAsIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsIterable);\n\t\t}\n\t\tthis.encodeAsAsyncIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsAsyncIterable);\n\t\t}\n\n\t\tfunction* encodeObjectAsIterable(object, iterateProperties, finalIterable) {\n\t\t\tlet constructor = object.constructor;\n\t\t\tif (constructor === Object) {\n\t\t\t\tlet useRecords = encoder.useRecords !== false;\n\t\t\t\tif (useRecords)\n\t\t\t\t\twriteObject(object, null); // write the record identifier\n\t\t\t\telse\n\t\t\t\t\twriteEntityLength(Object.keys(object).length, 0xa0);\n\t\t\t\tfor (let key in object) {\n\t\t\t\t\tlet value = object[key];\n\t\t\t\t\tif (!useRecords) encode(key);\n\t\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\t\tif (iterateProperties[key])\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties[key]);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, key);\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (constructor === Array) {\n\t\t\t\tlet length = object.length;\n\t\t\t\twriteArrayHeader(length);\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet value = object[i];\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (object[Symbol.iterator]) {\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tfor (let value of object) {\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else if (isBlob(object)){\n\t\t\t\twriteEntityLength(object.size, 0x40); // encode as binary data\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return blobs, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t} else if (object[Symbol.asyncIterator]) {\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return async iterators, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else {\n\t\t\t\tencode(object);\n\t\t\t}\n\t\t\tif (finalIterable && position > start) yield target.subarray(start, position);\n\t\t\telse if (position - start > chunkThreshold) {\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\trestartEncoding();\n\t\t\t}\n\t\t}\n\t\tfunction* tryEncode(value, iterateProperties, key) {\n\t\t\tlet restart = position - start;\n\t\t\ttry {\n\t\t\t\tencode(value);\n\t\t\t\tif (position - start > chunkThreshold) {\n\t\t\t\t\tyield target.subarray(start, position);\n\t\t\t\t\trestartEncoding();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (error.iteratorNotHandled) {\n\t\t\t\t\titerateProperties[key] = {};\n\t\t\t\t\tposition = start + restart; // restart our position so we don't have partial data from last encode\n\t\t\t\t\tyield* encodeObjectAsIterable.call(this, value, iterateProperties[key]);\n\t\t\t\t} else throw error;\n\t\t\t}\n\t\t}\n\t\tfunction restartEncoding() {\n\t\t\tchunkThreshold = continuedChunkThreshold;\n\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // restart encoding\n\t\t}\n\t\tfunction startEncoding(value, options, encodeIterable) {\n\t\t\tif (options && options.chunkThreshold) // explicitly specified chunk sizes\n\t\t\t\tchunkThreshold = continuedChunkThreshold = options.chunkThreshold;\n\t\t\telse // we start with a smaller threshold to get initial bytes sent quickly\n\t\t\t\tchunkThreshold = 100;\n\t\t\tif (value && typeof value === 'object') {\n\t\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // start encoding\n\t\t\t\treturn encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);\n\t\t\t}\n\t\t\treturn [encoder.encode(value)];\n\t\t}\n\n\t\tasync function* encodeObjectAsAsyncIterable(value, iterateProperties) {\n\t\t\tfor (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {\n\t\t\t\tlet constructor = encodedValue.constructor;\n\t\t\t\tif (constructor === ByteArray || constructor === Uint8Array)\n\t\t\t\t\tyield encodedValue;\n\t\t\t\telse if (isBlob(encodedValue)) {\n\t\t\t\t\tlet reader = encodedValue.stream().getReader();\n\t\t\t\t\tlet next;\n\t\t\t\t\twhile (!(next = await reader.read()).done) {\n\t\t\t\t\t\tyield next.value;\n\t\t\t\t\t}\n\t\t\t\t} else if (encodedValue[Symbol.asyncIterator]) {\n\t\t\t\t\tfor await (let asyncValue of encodedValue) {\n\t\t\t\t\t\trestartEncoding();\n\t\t\t\t\t\tif (asyncValue)\n\t\t\t\t\t\t\tyield* encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {}));\n\t\t\t\t\t\telse yield encoder.encode(asyncValue);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tyield encodedValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tuseBuffer(buffer) {\n\t\t// this means we are finished using our own buffer and we can write over it safely\n\t\ttarget = buffer\n\t\ttargetView = new DataView(target.buffer, target.byteOffset, target.byteLength)\n\t\tposition = 0\n\t}\n\tclearSharedData() {\n\t\tif (this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.sharedValues)\n\t\t\tthis.sharedValues = undefined\n\t}\n\tupdateSharedData() {\n\t\tlet lastVersion = this.sharedVersion || 0\n\t\tthis.sharedVersion = lastVersion + 1\n\t\tlet structuresCopy = this.structures.slice(0)\n\t\tlet sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion)\n\t\tlet saveResults = this.saveShared(sharedData,\n\t\t\t\texistingShared => (existingShared && existingShared.version || 0) == lastVersion)\n\t\tif (saveResults === false) {\n\t\t\t// get updated structures and try again if the update failed\n\t\t\tsharedData = this.getShared() || {}\n\t\t\tthis.structures = sharedData.structures || []\n\t\t\tthis.sharedValues = sharedData.packedValues\n\t\t\tthis.sharedVersion = sharedData.version\n\t\t\tthis.structures.nextId = this.structures.length\n\t\t} else {\n\t\t\t// restore structures\n\t\t\tstructuresCopy.forEach((structure, i) => this.structures[i] = structure)\n\t\t}\n\t\t// saveShared may fail to write and reload, or may have reloaded to check compatibility and overwrite saved data, either way load the correct shared data\n\t\treturn saveResults\n\t}\n}\nfunction writeEntityLength(length, majorValue) {\n\tif (length < 0x18)\n\t\ttarget[position++] = majorValue | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = majorValue | 0x18\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = majorValue | 0x19\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = majorValue | 0x1a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\n}\nclass SharedData {\n\tconstructor(structures, values, version) {\n\t\tthis.structures = structures\n\t\tthis.packedValues = values\n\t\tthis.version = version\n\t}\n}\n\nfunction writeArrayHeader(length) {\n\tif (length < 0x18)\n\t\ttarget[position++] = 0x80 | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = 0x98\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x99\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x9a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n}\n\nconst BlobConstructor = typeof Blob === 'undefined' ? function(){} : Blob;\nfunction isBlob(object) {\n\tif (object instanceof BlobConstructor)\n\t\treturn true;\n\tlet tag = object[Symbol.toStringTag];\n\treturn tag === 'Blob' || tag === 'File';\n}\nfunction findRepetitiveStrings(value, packedValues) {\n\tswitch(typeof value) {\n\t\tcase 'string':\n\t\t\tif (value.length > 3) {\n\t\t\t\tif (packedValues.objectMap[value] > -1 || packedValues.values.length >= packedValues.maxValues)\n\t\t\t\t\treturn\n\t\t\t\tlet packedStatus = packedValues.get(value)\n\t\t\t\tif (packedStatus) {\n\t\t\t\t\tif (++packedStatus.count == 2) {\n\t\t\t\t\t\tpackedValues.values.push(value)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpackedValues.set(value, {\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t})\n\t\t\t\t\tif (packedValues.samplingPackedValues) {\n\t\t\t\t\t\tlet status = packedValues.samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpackedValues.samplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'object':\n\t\t\tif (value) {\n\t\t\t\tif (value instanceof Array) {\n\t\t\t\t\tfor (let i = 0, l = value.length; i < l; i++) {\n\t\t\t\t\t\tfindRepetitiveStrings(value[i], packedValues)\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tlet includeKeys = !packedValues.encoder.useRecords\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tif (value.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tif (includeKeys)\n\t\t\t\t\t\t\t\tfindRepetitiveStrings(key, packedValues)\n\t\t\t\t\t\t\tfindRepetitiveStrings(value[key], packedValues)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'function': console.log(value)\n\t}\n}\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nextensionClasses = [ Date, Set, Error, RegExp, Tag, ArrayBuffer,\n\tUint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? function() {} : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? function() {} : BigInt64Array,\n\tFloat32Array, Float64Array, SharedData ]\n\n//Object.getPrototypeOf(Uint8Array.prototype).constructor /*TypedArray*/\nextensions = [{ // Date\n\ttag: 1,\n\tencode(date, encode) {\n\t\tlet seconds = date.getTime() / 1000\n\t\tif ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 0x100000000) {\n\t\t\t// Timestamp 32\n\t\t\ttarget[position++] = 0x1a\n\t\t\ttargetView.setUint32(position, seconds)\n\t\t\tposition += 4\n\t\t} else {\n\t\t\t// Timestamp float64\n\t\t\ttarget[position++] = 0xfb\n\t\t\ttargetView.setFloat64(position, seconds)\n\t\t\tposition += 8\n\t\t}\n\t}\n}, { // Set\n\ttag: 258, // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n\tencode(set, encode) {\n\t\tlet array = Array.from(set)\n\t\tencode(array)\n\t}\n}, { // Error\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(error, encode) {\n\t\tencode([ error.name, error.message ])\n\t}\n}, { // RegExp\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(regex, encode) {\n\t\tencode([ 'RegExp', regex.source, regex.flags ])\n\t}\n}, { // Tag\n\tgetTag(tag) {\n\t\treturn tag.tag\n\t},\n\tencode(tag, encode) {\n\t\tencode(tag.value)\n\t}\n}, { // ArrayBuffer\n\tencode(arrayBuffer, encode, makeRoom) {\n\t\twriteBuffer(arrayBuffer, makeRoom)\n\t}\n}, { // Uint8Array\n\tgetTag(typedArray) {\n\t\tif (typedArray.constructor === Uint8Array) {\n\t\t\tif (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false)\n\t\t\t\treturn 64;\n\t\t} // else no tag\n\t},\n\tencode(typedArray, encode, makeRoom) {\n\t\twriteBuffer(typedArray, makeRoom)\n\t}\n},\n\ttypedArrayEncoder(68, 1),\n\ttypedArrayEncoder(69, 2),\n\ttypedArrayEncoder(70, 4),\n\ttypedArrayEncoder(71, 8),\n\ttypedArrayEncoder(72, 1),\n\ttypedArrayEncoder(77, 2),\n\ttypedArrayEncoder(78, 4),\n\ttypedArrayEncoder(79, 8),\n\ttypedArrayEncoder(85, 4),\n\ttypedArrayEncoder(86, 8),\n{\n\tencode(sharedData, encode) { // write SharedData\n\t\tlet packedValues = sharedData.packedValues || []\n\t\tlet sharedStructures = sharedData.structures || []\n\t\tif (packedValues.values.length > 0) {\n\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\twriteArrayHeader(4)\n\t\t\tlet valuesArray = packedValues.values\n\t\t\tencode(valuesArray)\n\t\t\twriteArrayHeader(0) // prefixes\n\t\t\twriteArrayHeader(0) // suffixes\n\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t}\n\t\t}\n\t\tif (sharedStructures) {\n\t\t\ttargetView.setUint32(position, 0xd9dffe00)\n\t\t\tposition += 3\n\t\t\tlet definitions = sharedStructures.slice(0)\n\t\t\tdefinitions.unshift(0xe000)\n\t\t\tdefinitions.push(new Tag(sharedData.version, 0x53687264))\n\t\t\tencode(definitions)\n\t\t} else\n\t\t\tencode(new Tag(sharedData.version, 0x53687264))\n\t\t}\n\t}]\nfunction typedArrayEncoder(tag, size) {\n\tif (!isLittleEndianMachine && size > 1)\n\t\ttag -= 4 // the big endian equivalents are 4 less\n\treturn {\n\t\ttag: tag,\n\t\tencode: function writeExtBuffer(typedArray, encode) {\n\t\t\tlet length = typedArray.byteLength\n\t\t\tlet offset = typedArray.byteOffset || 0\n\t\t\tlet buffer = typedArray.buffer || typedArray\n\t\t\tencode(hasNodeBuffer ? Buffer.from(buffer, offset, length) :\n\t\t\t\tnew Uint8Array(buffer, offset, length))\n\t\t}\n\t}\n}\nfunction writeBuffer(buffer, makeRoom) {\n\tlet length = buffer.byteLength\n\tif (length < 0x18) {\n\t\ttarget[position++] = 0x40 + length\n\t} else if (length < 0x100) {\n\t\ttarget[position++] = 0x58\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x59\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x5a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\tif (position + length >= target.length) {\n\t\tmakeRoom(position + length)\n\t}\n\t// if it is already a typed array (has an ArrayBuffer), use that, but if it is an ArrayBuffer itself,\n\t// must wrap it to set it.\n\ttarget.set(buffer.buffer ? buffer : new Uint8Array(buffer), position)\n\tposition += length\n}\n\nfunction insertIds(serialized, idsToInsert) {\n\t// insert the ids that need to be referenced for structured clones\n\tlet nextId\n\tlet distanceToMove = idsToInsert.length * 2\n\tlet lastEnd = serialized.length - distanceToMove\n\tidsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1)\n\tfor (let id = 0; id < idsToInsert.length; id++) {\n\t\tlet referee = idsToInsert[id]\n\t\treferee.id = id\n\t\tfor (let position of referee.references) {\n\t\t\tserialized[position++] = id >> 8\n\t\t\tserialized[position] = id & 0xff\n\t\t}\n\t}\n\twhile (nextId = idsToInsert.pop()) {\n\t\tlet offset = nextId.offset\n\t\tserialized.copyWithin(offset + distanceToMove, offset, lastEnd)\n\t\tdistanceToMove -= 2\n\t\tlet position = offset + distanceToMove\n\t\tserialized[position++] = 0xd8\n\t\tserialized[position++] = 28 // http://cbor.schmorp.de/value-sharing\n\t\tlastEnd = offset\n\t}\n\treturn serialized\n}\nfunction writeBundles(start, encode) {\n\ttargetView.setUint32(bundledStrings.position + start, position - bundledStrings.position - start + 1) // the offset to bundle\n\tlet writeStrings = bundledStrings\n\tbundledStrings = null\n\tencode(writeStrings[0])\n\tencode(writeStrings[1])\n}\n\nexport function addExtension(extension) {\n\tif (extension.Class) {\n\t\tif (!extension.encode)\n\t\t\tthrow new Error('Extension has no encode function')\n\t\textensionClasses.unshift(extension.Class)\n\t\textensions.unshift(extension)\n\t}\n\tdecodeAddExtension(extension)\n}\nlet defaultEncoder = new Encoder({ useRecords: false })\nexport const encode = defaultEncoder.encode\nexport const encodeAsIterable = defaultEncoder.encodeAsIterable\nexport const encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable\nexport { FLOAT32_OPTIONS } from './decode.js'\nimport { FLOAT32_OPTIONS } from './decode.js'\nexport const { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS\nexport const REUSE_BUFFER_MODE = 512\nexport const RESET_BUFFER_MODE = 1024\nexport const THROW_ON_ITERABLE = 2048\n\n\n"],"names":["decoder","src","srcEnd","TextDecoder","error","position","RECORD_DEFINITIONS_ID","RECORD_INLINE_ID","BUNDLED_STRINGS_ID","STOP_CODE","currentStructures","srcString","bundledStrings","referenceMap","packedValues","dataView","restoreMapsAsObject","currentDecoder","srcStringStart","srcStringEnd","currentExtensions","currentExtensionRanges","defaultOptions","useRecords","mapsAsObjects","sequentialMode","inlineObjectReadThreshold","Function","Infinity","Decoder","constructor","options","keyMap","_keyMap","getStructures","getShared","structures","uninitialized","this","mapKey","Map","k","v","Object","entries","set","assign","decodeKey","key","get","encodeKey","hasOwnProperty","encodeKeys","rec","map","decodeKeys","name","_mapKey","res","forEach","safeKey","has","mapDecode","source","end","decode","r","saveState","clearSource","prototype","call","length","position$1","bundledStrings$1","DataView","buffer","byteOffset","byteLength","Uint8Array","Error","sharedValues","pack","Array","maxPrivatePackedValues","concat","checkedRead","decodeMultiple","values","lastPosition","size","value","defaultDecoder","push","result","read","postBundlePosition","incomplete","RangeError","message","startsWith","token","majorType","byte0","byte1","exponent","NaN","abs","u8Array","f32Array","getFloat16","getUint16","getFloat32","useFloat32","multiplier","mult10","getUint32","getFloat64","int64AsNumber","getBigUint64","array","i","join","Buffer","object","copyBuffers","slice","subarray","string","shortStringInJS","start","bytes","byte","fromCharCode","apply","String","longStringInJS","readFixedString","structure","createStructureReader","readJustLength","id","recordDefinition","bundlePosition","bundleLength","dataPosition","readStringJS","position0","position1","readBundleExt","loadShared","extension","handlesRead","input","Tag","packedValue","getPackedValues","isNaN","validName","slowReads","compiledReader","propertyCount","next","test","JSON","stringify","units","byte2","byte3","unit","a","b","c","d","e","f","g","h","j","l","m","n","o","Float32Array","tag","dateString","Date","epochSec","Math","round","BigInt","fraction","exp","log","existingStructure","isShared","restoreStructures","data","glbl","RegExp","packedTable","newPackedValues","prefixes","suffixes","combine","target","refEntry","targetProperties","used","Set","version","isLittleEndianMachine","Uint16Array","typedArrays","Uint8ClampedArray","Uint32Array","BigUint64Array","Int8Array","Int16Array","Int32Array","BigInt64Array","Float64Array","typedArrayTags","registerTypedArray","TypedArray","bytesPerElement","dvMethod","BYTES_PER_ELEMENT","littleEndian","sizeShift","dv","elements","ta","method","sharedData","updatedStructures","sharedVersion","splice","callback","savedSrcEnd","savedPosition","savedSrcStringStart","savedSrcStringEnd","savedSrcString","savedReferenceMap","savedBundledStrings","savedSrc","savedStructures","savedDecoder","savedSequentialMode","floor","textEncoder","extensions","extensionClasses","TextEncoder","globalThis","hasNodeBuffer","ByteArrayAllocate","allocUnsafeSlow","ByteArray","MAX_BUFFER_SIZE","throwOnIterable","targetView","safeEnd","hasNonLatin","RECORD_SYMBOL","Symbol","Encoder","sharedStructures","hasSharedUpdate","super","offset","encodeUtf8","utf8Write","maxBytes","encodeInto","written","encoder","hasSharedStructures","saveStructures","maxSharedStructures","isSequential","sequential","saveShared","samplingPackedValues","packedObjectMap","sharedPackedObjectMap","create","recordIdsToRemove","transitionsCount","serializationsSinceTransitionRebuild","mapEncode","encodeOptions","_mapped","encode","REUSE_BUFFER_MODE","useSelfDescribedHeader","setUint32","structuredClone","bundleStrings","sharedStructuresLength","transitions","keys","nextTransition","transition","nextId","maxValues","objectMap","findRepetitiveStrings","writeArrayHeader","valuesArray","THROW_ON_ITERABLE","writeBundles","idsToInsert","makeRoom","serialized","distanceToMove","lastEnd","sort","referee","references","pop","copyWithin","insertIds","returnBuffer","updateSharedData","RESET_BUFFER_MODE","findCommonStringsToPack","threshold","status","count","type","packedPosition","headerSize","strLength","extStart","twoByte","c1","c2","strPosition","charCodeAt","alwaysUseFloat","xShifted","setFloat32","setFloat64","setUint16","writeObject","useTag259ForMaps","entryValue","getTag","iterator","iteratorNotHandled","entry","asyncIterator","isBlob","useToJSON","toJSON","json","setBigUint64","largeBigIntToFloat","Number","variableMapSize","vals","safePrototype","objectOffset","parentRecordId","newTransitions","recordId","__keys__","shift","newSize","min","max","newBuffer","copy","chunkThreshold","continuedChunkThreshold","encodeObjectAsIterable","iterateProperties","finalIterable","writeEntityLength","tryEncode","element","restart","restartEncoding","startEncoding","encodeIterable","async","encodeObjectAsAsyncIterable","encodedValue","reader","stream","getReader","done","asyncValue","encodeAsIterable","encodeAsAsyncIterable","useBuffer","clearSharedData","lastVersion","structuresCopy","SharedData","saveResults","existingShared","majorValue","BlobConstructor","Blob","toStringTag","packedStatus","includeKeys","console","typedArrayEncoder","typedArray","from","writeBuffer","writeStrings","ArrayBuffer","date","seconds","getTime","useTimestamp32","getMilliseconds","regex","flags","arrayBuffer","tagUint8Array","definitions","unshift","defaultEncoder"],"mappings":"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","x_google_ignoreList":[0,1]}