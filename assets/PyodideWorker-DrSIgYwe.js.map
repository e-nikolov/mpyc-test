{"version":3,"file":"PyodideWorker-DrSIgYwe.js","sources":["../../mpyc-web-core/lib/runtimes/PyodideWorker/PyodideWorker.ts","../../mpyc-web-core/lib/runtimes/PyodideWorker/startup.py?raw"],"sourcesContent":["// webworker.js\n\n// Setup your project to serve `py-worker.js`. You should also serve\n// `pyodide.js`, and all its associated `.asm.js`, `.json`,\n// and `.wasm` files as well:\nconsole.log(\"PyodideWorker.ts\")\n\n\n\n\nimport startup from './startup.py?raw';\n\n// import { loadPyodide } from 'pyodide'\n\nconst { parse, stringify } = JSON;\n\n\nconst getPolyscriptJSModule = (interpreter: any) => {\n\n\n    console.log(interpreter.ffi)\n    console.log(interpreter.ffi)\n    const transform = (value) => (\n        value instanceof interpreter.ffi.PyProxy ?\n            value.toJs(toJsOptions) :\n            value\n    )\n\n    // const { proxy: sync, window, isWindowProxy } = coincident(self, {\n    //     parse,\n    //     stringify,\n    //     transform: value => transform ? transform(value) : value\n    // });\n\n    return {\n        xworker: {\n            // allows synchronous utilities between this worker and the main thread\n            // sync,\n            sync: { getEnv: () => { return {} } },\n            // allow access to the main thread world\n            // window,\n            // allow introspection for foreign (main thread) refrences\n            // isWindowProxy,\n            // standard worker related events / features\n            onmessage: console.info,\n            onerror: console.error,\n            onmessageerror: console.warn,\n            postMessage: postMessage.bind(self),\n        }\n    };\n\n}\nconst toJsOptions = { dict_converter: Object.fromEntries };\n\nasync function loadPyodideAndPackages() {\n    // // Don't bother yet with this line, suppose our API is built in such a way:\n    // const { id, python, ...context } = event.data;\n    // // // The worker copies the context in its own \"memory\" (an object mapping name to values)\n    // for (const key of Object.keys(context)) {\n    //     self[key] = context[key];\n    // }\n    // // // Now is the easy part, the one that is similar to working in the main thread:\n    // try {\n    //     await self.pyodide.loadPackagesFromImports(python);\n    //     let results = await self.pyodide.runPythonAsync(python);\n    //     self.postMessage({ results, id });\n    // } catch (error) {\n    //     self.postMessage({ error: error.message, id });\n    // }\n}\nconsole.error(\"loading pyodide\")\n\nself.onmessage = async (event) => {\n    // make sure loading is done\n    // await pyodideReadyPromise;\n    await self.pyodide.runPythonAsync(startup)\n\n    console.log(\"event\")\n    console.error(event)\n\n};\n\n// self.pyodide = await loadPyodide({\n//     stdout: (message: any) => {\n//         console.warn(\"stdout\");\n//         console.warn(message)\n//         self.postMessage([\"proxy:js:display\", message.toJS()])\n//     },\n//     stderr: (message: any) => {\n//         console.warn(\"stderr\")\n//         console.warn(message)\n//         self.postMessage([\"proxy:js:display:error\", message.toJS()])\n//     },\n//     packages: [\"micropip\", \"pygments\", \"numpy\", \"gmpy2\", \"pyyaml\", \"/py/mpyc_web-0.4.0-py3-none-any.whl\", \"https://files.pythonhosted.org/packages/be/2a/4e62ff633612f746f88618852a626bbe24226eba5e7ac90e91dcfd6a414e/rich-13.6.0-py3-none-any.whl\"]\n// });\n\n\n// console.warn(stringToByteArray(startup))\n// console.warn(typeof mpycweb)\n// await self.pyodide.FS.writeFile(\"./mpyc_web-0.4.0-py3-none-any.whl\", stringToByteArray(startup))\n// let micropip = await self.pyodide.pyimport(\"micropip\")\n// await micropip.install(\"emfs:./mpyc_web-0.4.0-py3-none-any.whl\")\n// console.error(\"done loading pyodide\")\n// await self.pyodide.loadPackage(\"emfs:./mpyc_web-0.4.0-py3-none-any.whl\")\n// await self.pyodide.loadPackage([\"numpy\", \"pytz\"]);\n\n\n\n\n// self.pyodide.registerJsModule('polyscript', getPolyscriptJSModule(self.pyodide));\n\nself.pyodide.runPython(startup)\n\n// // This should be the only helper needed for all Emscripten based FS exports\n// const writeFile = ({ FS, PATH, PATH_FS } = self.pyodide, path, buffer) => {\n//     const absPath = PATH_FS.resolve(path);\n//     FS.mkdirTree(PATH.dirname(absPath));\n//     return FS.writeFile(absPath, new Uint8Array(buffer), {\n//         canOwn: true,\n//     });\n// };\n","export default \"\""],"names":["console","log","error","self","onmessage","async","event","pyodide","runPythonAsync","runPython"],"mappings":"yBAKAA,QAAQC,IAAI,oBAiEZD,QAAQE,MAAM,mBAETC,KAAAC,UAAYC,MAAOC,UAGdH,KAAKI,QAAQC,eC3ER,ID6EXR,QAAQC,IAAI,SACZD,QAAQE,MAAMI,EAAK,EAiClBH,KAAAI,QAAQE,UC/GE"}